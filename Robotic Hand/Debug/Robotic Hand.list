
Robotic Hand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008880  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08008b2c  08008b2c  00018b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c68  08008c68  00018c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c70  08008c70  00018c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008c74  08008c74  00018c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08008c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002bc  24000060  08008cd8  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400031c  08008cd8  0002031c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014f8b  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002534  00000000  00000000  0003505c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001080  00000000  00000000  00037590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000cfc  00000000  00000000  00038610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000305be  00000000  00000000  0003930c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016dfa  00000000  00000000  000698ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013f85b  00000000  00000000  000806c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000048c0  00000000  00000000  001bff20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  001c47e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000060 	.word	0x24000060
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008b14 	.word	0x08008b14

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000064 	.word	0x24000064
 80002e8:	08008b14 	.word	0x08008b14

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fd33 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f8c7 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fad7 	bl	8000ba8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005fa:	f000 f939 	bl	8000870 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005fe:	f000 f9fb 	bl	80009f8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000602:	f000 fa85 	bl	8000b10 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000606:	2100      	movs	r1, #0
 8000608:	4857      	ldr	r0, [pc, #348]	; (8000768 <main+0x180>)
 800060a:	f004 fc8b 	bl	8004f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800060e:	2104      	movs	r1, #4
 8000610:	4855      	ldr	r0, [pc, #340]	; (8000768 <main+0x180>)
 8000612:	f004 fc87 	bl	8004f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	4854      	ldr	r0, [pc, #336]	; (800076c <main+0x184>)
 800061a:	f004 fc83 	bl	8004f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800061e:	2108      	movs	r1, #8
 8000620:	4852      	ldr	r0, [pc, #328]	; (800076c <main+0x184>)
 8000622:	f004 fc7f 	bl	8004f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000626:	210c      	movs	r1, #12
 8000628:	4850      	ldr	r0, [pc, #320]	; (800076c <main+0x184>)
 800062a:	f004 fc7b 	bl	8004f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800062e:	2108      	movs	r1, #8
 8000630:	484d      	ldr	r0, [pc, #308]	; (8000768 <main+0x180>)
 8000632:	f004 fc77 	bl	8004f24 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart3, Buf, sizeof(Buf));
 8000636:	2211      	movs	r2, #17
 8000638:	494d      	ldr	r1, [pc, #308]	; (8000770 <main+0x188>)
 800063a:	484e      	ldr	r0, [pc, #312]	; (8000774 <main+0x18c>)
 800063c:	f005 fd36 	bl	80060ac <HAL_UART_Receive_IT>
	  strncpy(cleanStr, (const char *)Buf + 1, sizeof(Buf) - 2);
 8000640:	4b4d      	ldr	r3, [pc, #308]	; (8000778 <main+0x190>)
 8000642:	220f      	movs	r2, #15
 8000644:	4619      	mov	r1, r3
 8000646:	484d      	ldr	r0, [pc, #308]	; (800077c <main+0x194>)
 8000648:	f008 fa26 	bl	8008a98 <strncpy>

	  cleanStr[sizeof(Buf) - 2] = '\0';
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <main+0x194>)
 800064e:	2200      	movs	r2, #0
 8000650:	73da      	strb	r2, [r3, #15]

	  for (int i = 0; i < 5; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e019      	b.n	800068c <main+0xa4>
	  	char temp[4];
	  	strncpy(temp, cleanStr + (i * 3), 3);
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	4613      	mov	r3, r2
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	4413      	add	r3, r2
 8000660:	461a      	mov	r2, r3
 8000662:	4b46      	ldr	r3, [pc, #280]	; (800077c <main+0x194>)
 8000664:	18d1      	adds	r1, r2, r3
 8000666:	463b      	mov	r3, r7
 8000668:	2203      	movs	r2, #3
 800066a:	4618      	mov	r0, r3
 800066c:	f008 fa14 	bl	8008a98 <strncpy>
	  	temp[3] = '\0';
 8000670:	2300      	movs	r3, #0
 8000672:	70fb      	strb	r3, [r7, #3]
	  	numbers[i] = atoi(temp);
 8000674:	463b      	mov	r3, r7
 8000676:	4618      	mov	r0, r3
 8000678:	f008 f976 	bl	8008968 <atoi>
 800067c:	4602      	mov	r2, r0
 800067e:	4940      	ldr	r1, [pc, #256]	; (8000780 <main+0x198>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for (int i = 0; i < 5; i++) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b04      	cmp	r3, #4
 8000690:	dde2      	ble.n	8000658 <main+0x70>
	  }

	  if ( numbers[4] >= 120 ){
 8000692:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <main+0x198>)
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	2b77      	cmp	r3, #119	; 0x77
 8000698:	dd05      	ble.n	80006a6 <main+0xbe>
	  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 5500);
 800069a:	4b34      	ldr	r3, [pc, #208]	; (800076c <main+0x184>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f241 527c 	movw	r2, #5500	; 0x157c
 80006a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80006a4:	e008      	b.n	80006b8 <main+0xd0>
	  }
	  else if (numbers[4] <= 30 ){
 80006a6:	4b36      	ldr	r3, [pc, #216]	; (8000780 <main+0x198>)
 80006a8:	691b      	ldr	r3, [r3, #16]
 80006aa:	2b1e      	cmp	r3, #30
 80006ac:	dc04      	bgt.n	80006b8 <main+0xd0>
	  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1000);
 80006ae:	4b2f      	ldr	r3, [pc, #188]	; (800076c <main+0x184>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006b6:	63da      	str	r2, [r3, #60]	; 0x3c
	  }
	  if ( numbers[3] >= 120 ){
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <main+0x198>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	2b77      	cmp	r3, #119	; 0x77
 80006be:	dd05      	ble.n	80006cc <main+0xe4>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 400);
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <main+0x180>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ca:	e008      	b.n	80006de <main+0xf6>
	  }
	  else if (numbers[3] <= 30 ){
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <main+0x198>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	2b1e      	cmp	r3, #30
 80006d2:	dc04      	bgt.n	80006de <main+0xf6>
	  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <main+0x180>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if ( numbers[2] >= 120 ){
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <main+0x198>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	2b77      	cmp	r3, #119	; 0x77
 80006e4:	dd05      	ble.n	80006f2 <main+0x10a>
	  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1050);
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <main+0x180>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f240 421a 	movw	r2, #1050	; 0x41a
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38
 80006f0:	e008      	b.n	8000704 <main+0x11c>
	  }
	  else if (numbers[2] <= 30 ){
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <main+0x198>)
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	2b1e      	cmp	r3, #30
 80006f8:	dc04      	bgt.n	8000704 <main+0x11c>
	  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 4000);
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <main+0x180>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000702:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  if ( numbers[1] >= 120 ){
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <main+0x198>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	2b77      	cmp	r3, #119	; 0x77
 800070a:	dd05      	ble.n	8000718 <main+0x130>
	  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 3500);
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <main+0x184>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
 8000716:	e008      	b.n	800072a <main+0x142>
	  }
	  else if (numbers[1] <= 30 ){
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <main+0x198>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	2b1e      	cmp	r3, #30
 800071e:	dc04      	bgt.n	800072a <main+0x142>
	  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <main+0x184>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if ( numbers[0] >= 120 ){
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <main+0x198>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b77      	cmp	r3, #119	; 0x77
 8000730:	dd0a      	ble.n	8000748 <main+0x160>
	  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 3500);
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <main+0x184>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f640 52ac 	movw	r2, #3500	; 0xdac
 800073a:	641a      	str	r2, [r3, #64]	; 0x40
	  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 3500);
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <main+0x180>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000744:	63da      	str	r2, [r3, #60]	; 0x3c
 8000746:	e776      	b.n	8000636 <main+0x4e>
	  }
	  else if (numbers[0] <= 30 ){
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <main+0x198>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b1e      	cmp	r3, #30
 800074e:	f73f af72 	bgt.w	8000636 <main+0x4e>
	  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <main+0x180>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800075a:	63da      	str	r2, [r3, #60]	; 0x3c
	  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1000);
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <main+0x184>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000764:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_UART_Receive_IT(&huart3, Buf, sizeof(Buf));
 8000766:	e766      	b.n	8000636 <main+0x4e>
 8000768:	2400007c 	.word	0x2400007c
 800076c:	240000c8 	.word	0x240000c8
 8000770:	240001a8 	.word	0x240001a8
 8000774:	24000114 	.word	0x24000114
 8000778:	240001a9 	.word	0x240001a9
 800077c:	240001bc 	.word	0x240001bc
 8000780:	240001cc 	.word	0x240001cc

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09c      	sub	sp, #112	; 0x70
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	224c      	movs	r2, #76	; 0x4c
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f008 f978 	bl	8008a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f008 f972 	bl	8008a88 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007a4:	4b30      	ldr	r3, [pc, #192]	; (8000868 <SystemClock_Config+0xe4>)
 80007a6:	f04f 32ff 	mov.w	r2, #4294967295
 80007aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007ae:	2004      	movs	r0, #4
 80007b0:	f001 fd08 	bl	80021c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	4b2c      	ldr	r3, [pc, #176]	; (800086c <SystemClock_Config+0xe8>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a2b      	ldr	r2, [pc, #172]	; (800086c <SystemClock_Config+0xe8>)
 80007be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <SystemClock_Config+0xe8>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d0:	bf00      	nop
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <SystemClock_Config+0xe8>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007de:	d1f8      	bne.n	80007d2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80007f8:	2323      	movs	r3, #35	; 0x23
 80007fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000808:	230c      	movs	r3, #12
 800080a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800080c:	2300      	movs	r3, #0
 800080e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fd2d 	bl	8002278 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000824:	f000 fa16 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	233f      	movs	r3, #63	; 0x3f
 800082a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2303      	movs	r3, #3
 800082e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000844:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2106      	movs	r1, #6
 800084e:	4618      	mov	r0, r3
 8000850:	f002 f944 	bl	8002adc <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800085a:	f000 f9fb 	bl	8000c54 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3770      	adds	r7, #112	; 0x70
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	58024400 	.word	0x58024400
 800086c:	58024800 	.word	0x58024800

08000870 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	; 0x70
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000890:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	615a      	str	r2, [r3, #20]
 80008a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2234      	movs	r2, #52	; 0x34
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f008 f8ec 	bl	8008a88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b0:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <MX_TIM1_Init+0x180>)
 80008b2:	4a50      	ldr	r2, [pc, #320]	; (80009f4 <MX_TIM1_Init+0x184>)
 80008b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 80008b6:	4b4e      	ldr	r3, [pc, #312]	; (80009f0 <MX_TIM1_Init+0x180>)
 80008b8:	22b3      	movs	r2, #179	; 0xb3
 80008ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b4c      	ldr	r3, [pc, #304]	; (80009f0 <MX_TIM1_Init+0x180>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80008c2:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <MX_TIM1_Init+0x180>)
 80008c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80008c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <MX_TIM1_Init+0x180>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d0:	4b47      	ldr	r3, [pc, #284]	; (80009f0 <MX_TIM1_Init+0x180>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <MX_TIM1_Init+0x180>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008dc:	4844      	ldr	r0, [pc, #272]	; (80009f0 <MX_TIM1_Init+0x180>)
 80008de:	f004 fa69 	bl	8004db4 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f9b4 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008f6:	4619      	mov	r1, r3
 80008f8:	483d      	ldr	r0, [pc, #244]	; (80009f0 <MX_TIM1_Init+0x180>)
 80008fa:	f004 fd35 	bl	8005368 <HAL_TIM_ConfigClockSource>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000904:	f000 f9a6 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000908:	4839      	ldr	r0, [pc, #228]	; (80009f0 <MX_TIM1_Init+0x180>)
 800090a:	f004 faaa 	bl	8004e62 <HAL_TIM_PWM_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000914:	f000 f99e 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000924:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000928:	4619      	mov	r1, r3
 800092a:	4831      	ldr	r0, [pc, #196]	; (80009f0 <MX_TIM1_Init+0x180>)
 800092c:	f005 fa54 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000936:	f000 f98d 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	; 0x60
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000942:	2300      	movs	r3, #0
 8000944:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000956:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800095a:	2200      	movs	r2, #0
 800095c:	4619      	mov	r1, r3
 800095e:	4824      	ldr	r0, [pc, #144]	; (80009f0 <MX_TIM1_Init+0x180>)
 8000960:	f004 fbee 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800096a:	f000 f973 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800096e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000972:	2204      	movs	r2, #4
 8000974:	4619      	mov	r1, r3
 8000976:	481e      	ldr	r0, [pc, #120]	; (80009f0 <MX_TIM1_Init+0x180>)
 8000978:	f004 fbe2 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000982:	f000 f967 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000986:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800098a:	2208      	movs	r2, #8
 800098c:	4619      	mov	r1, r3
 800098e:	4818      	ldr	r0, [pc, #96]	; (80009f0 <MX_TIM1_Init+0x180>)
 8000990:	f004 fbd6 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800099a:	f000 f95b 	bl	8000c54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <MX_TIM1_Init+0x180>)
 80009d4:	f005 fa8e 	bl	8005ef4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80009de:	f000 f939 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009e2:	4803      	ldr	r0, [pc, #12]	; (80009f0 <MX_TIM1_Init+0x180>)
 80009e4:	f000 f98e 	bl	8000d04 <HAL_TIM_MspPostInit>

}
 80009e8:	bf00      	nop
 80009ea:	3770      	adds	r7, #112	; 0x70
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2400007c 	.word	0x2400007c
 80009f4:	40010000 	.word	0x40010000

080009f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a2a:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8000a32:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000a34:	22b3      	movs	r2, #179	; 0xb3
 8000a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000a40:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a52:	482e      	ldr	r0, [pc, #184]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000a54:	f004 f9ae 	bl	8004db4 <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a5e:	f000 f8f9 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4827      	ldr	r0, [pc, #156]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000a70:	f004 fc7a 	bl	8005368 <HAL_TIM_ConfigClockSource>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a7a:	f000 f8eb 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a7e:	4823      	ldr	r0, [pc, #140]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000a80:	f004 f9ef 	bl	8004e62 <HAL_TIM_PWM_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a8a:	f000 f8e3 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481b      	ldr	r0, [pc, #108]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000a9e:	f005 f99b 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000aa8:	f000 f8d4 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aac:	2360      	movs	r3, #96	; 0x60
 8000aae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4812      	ldr	r0, [pc, #72]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000ac4:	f004 fb3c 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ace:	f000 f8c1 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000ada:	f004 fb31 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000ae4:	f000 f8b6 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	220c      	movs	r2, #12
 8000aec:	4619      	mov	r1, r3
 8000aee:	4807      	ldr	r0, [pc, #28]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000af0:	f004 fb26 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000afa:	f000 f8ab 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <MX_TIM2_Init+0x114>)
 8000b00:	f000 f900 	bl	8000d04 <HAL_TIM_MspPostInit>

}
 8000b04:	bf00      	nop
 8000b06:	3738      	adds	r7, #56	; 0x38
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	240000c8 	.word	0x240000c8

08000b10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b16:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <MX_USART3_UART_Init+0x94>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b58:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b5a:	f005 fa57 	bl	800600c <HAL_UART_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b64:	f000 f876 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b6c:	f007 fe31 	bl	80087d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b76:	f000 f86d 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b7e:	f007 fe66 	bl	800884e <HAL_UARTEx_SetRxFifoThreshold>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b88:	f000 f864 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b8e:	f007 fde7 	bl	8008760 <HAL_UARTEx_DisableFifoMode>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b98:	f000 f85c 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	24000114 	.word	0x24000114
 8000ba4:	40004800 	.word	0x40004800

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000bb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000bc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000bce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd2:	4a1f      	ldr	r2, [pc, #124]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000bde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000bec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000bfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000c0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0e:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000c1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000c28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c44:	bf00      	nop
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	58024400 	.word	0x58024400

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>
	...

08000c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_MspInit+0x30>)
 8000c68:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c6c:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_MspInit+0x30>)
 8000c6e:	f043 0302 	orr.w	r3, r3, #2
 8000c72:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_MspInit+0x30>)
 8000c78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	58024400 	.word	0x58024400

08000c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <HAL_TIM_Base_MspInit+0x68>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d10f      	bne.n	8000cc6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_TIM_Base_MspInit+0x6c>)
 8000ca8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <HAL_TIM_Base_MspInit+0x6c>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_TIM_Base_MspInit+0x6c>)
 8000cb8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cc4:	e013      	b.n	8000cee <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cce:	d10e      	bne.n	8000cee <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_TIM_Base_MspInit+0x6c>)
 8000cd2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_TIM_Base_MspInit+0x6c>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_TIM_Base_MspInit+0x6c>)
 8000ce2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	58024400 	.word	0x58024400

08000d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a25      	ldr	r2, [pc, #148]	; (8000db8 <HAL_TIM_MspPostInit+0xb4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d120      	bne.n	8000d68 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <HAL_TIM_MspPostInit+0xb8>)
 8000d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d2c:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <HAL_TIM_MspPostInit+0xb8>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_TIM_MspPostInit+0xb8>)
 8000d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8000d44:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <HAL_TIM_MspPostInit+0xbc>)
 8000d62:	f001 f87f 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d66:	e023      	b.n	8000db0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d70:	d11e      	bne.n	8000db0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_TIM_MspPostInit+0xb8>)
 8000d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d78:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_TIM_MspPostInit+0xb8>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_TIM_MspPostInit+0xb8>)
 8000d84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000d90:	230d      	movs	r3, #13
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000da0:	2301      	movs	r3, #1
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <HAL_TIM_MspPostInit+0xc0>)
 8000dac:	f001 f85a 	bl	8001e64 <HAL_GPIO_Init>
}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40010000 	.word	0x40010000
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58021000 	.word	0x58021000
 8000dc4:	58020000 	.word	0x58020000

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0ba      	sub	sp, #232	; 0xe8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	22c0      	movs	r2, #192	; 0xc0
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f007 fe4d 	bl	8008a88 <memset>
  if(huart->Instance==USART3)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a2b      	ldr	r2, [pc, #172]	; (8000ea0 <HAL_UART_MspInit+0xd8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d14e      	bne.n	8000e96 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000df8:	f04f 0202 	mov.w	r2, #2
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 f9f0 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e1a:	f7ff ff1b 	bl	8000c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HAL_UART_MspInit+0xdc>)
 8000e20:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e24:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_UART_MspInit+0xdc>)
 8000e26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e2a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_UART_MspInit+0xdc>)
 8000e30:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0xdc>)
 8000e3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e42:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <HAL_UART_MspInit+0xdc>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0xdc>)
 8000e4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e74:	2307      	movs	r3, #7
 8000e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <HAL_UART_MspInit+0xe0>)
 8000e82:	f000 ffef 	bl	8001e64 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2027      	movs	r0, #39	; 0x27
 8000e8c:	f000 fa51 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e90:	2027      	movs	r0, #39	; 0x27
 8000e92:	f000 fa68 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	37e8      	adds	r7, #232	; 0xe8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40004800 	.word	0x40004800
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020c00 	.word	0x58020c00

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f000 f920 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <USART3_IRQHandler+0x10>)
 8000f06:	f005 f91d 	bl	8006144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24000114 	.word	0x24000114

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <SystemInit+0xd0>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <SystemInit+0xd0>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <SystemInit+0xd4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d807      	bhi.n	8000f44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f34:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <SystemInit+0xd4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f023 030f 	bic.w	r3, r3, #15
 8000f3c:	4a2a      	ldr	r2, [pc, #168]	; (8000fe8 <SystemInit+0xd4>)
 8000f3e:	f043 0303 	orr.w	r3, r3, #3
 8000f42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f44:	4b29      	ldr	r3, [pc, #164]	; (8000fec <SystemInit+0xd8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a28      	ldr	r2, [pc, #160]	; (8000fec <SystemInit+0xd8>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f50:	4b26      	ldr	r3, [pc, #152]	; (8000fec <SystemInit+0xd8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <SystemInit+0xd8>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4924      	ldr	r1, [pc, #144]	; (8000fec <SystemInit+0xd8>)
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <SystemInit+0xdc>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <SystemInit+0xd4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <SystemInit+0xd4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f023 030f 	bic.w	r3, r3, #15
 8000f76:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <SystemInit+0xd4>)
 8000f78:	f043 0303 	orr.w	r3, r3, #3
 8000f7c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <SystemInit+0xd8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <SystemInit+0xd8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <SystemInit+0xd8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <SystemInit+0xd8>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <SystemInit+0xe0>)
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <SystemInit+0xd8>)
 8000f98:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <SystemInit+0xe4>)
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <SystemInit+0xd8>)
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <SystemInit+0xe8>)
 8000fa0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <SystemInit+0xd8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <SystemInit+0xd8>)
 8000faa:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <SystemInit+0xe8>)
 8000fac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <SystemInit+0xd8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <SystemInit+0xd8>)
 8000fb6:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <SystemInit+0xe8>)
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <SystemInit+0xd8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <SystemInit+0xd8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <SystemInit+0xd8>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <SystemInit+0xd8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <SystemInit+0xec>)
 8000fd4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fd8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	52002000 	.word	0x52002000
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ff4:	02020200 	.word	0x02020200
 8000ff8:	01ff0000 	.word	0x01ff0000
 8000ffc:	01010280 	.word	0x01010280
 8001000:	52004000 	.word	0x52004000

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001008:	f7ff ff84 	bl	8000f14 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	; (8001044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	; (8001050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001032:	f007 fd4b 	bl	8008acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fad7 	bl	80005e8 <main>
  bx  lr
 800103a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001040:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001044:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001048:	08008c78 	.word	0x08008c78
  ldr r2, =_sbss
 800104c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001050:	2400031c 	.word	0x2400031c

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 f95c 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001064:	f001 fef0 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8001068:	4602      	mov	r2, r0
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_Init+0x68>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	4913      	ldr	r1, [pc, #76]	; (80010c4 <HAL_Init+0x6c>)
 8001076:	5ccb      	ldrb	r3, [r1, r3]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	fa22 f303 	lsr.w	r3, r2, r3
 8001080:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_Init+0x68>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <HAL_Init+0x6c>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	fa22 f303 	lsr.w	r3, r2, r3
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_Init+0x70>)
 800109a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800109c:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_Init+0x74>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f814 	bl	80010d0 <HAL_InitTick>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e002      	b.n	80010b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010b2:	f7ff fdd5 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	58024400 	.word	0x58024400
 80010c4:	08008b2c 	.word	0x08008b2c
 80010c8:	24000004 	.word	0x24000004
 80010cc:	24000000 	.word	0x24000000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_InitTick+0x60>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e021      	b.n	8001128 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_InitTick+0x64>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_InitTick+0x60>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f941 	bl	8001382 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f90b 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_InitTick+0x68>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2400000c 	.word	0x2400000c
 8001134:	24000000 	.word	0x24000000
 8001138:	24000008 	.word	0x24000008

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2400000c 	.word	0x2400000c
 8001160:	240001e0 	.word	0x240001e0

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	240001e0 	.word	0x240001e0

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <__NVIC_SetPriorityGrouping+0x40>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x40>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00
 80011c0:	05fa0000 	.word	0x05fa0000

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff40 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff90 	bl	8001270 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5f 	bl	800121c <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff33 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffa4 	bl	80012d8 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff fede 	bl	8001164 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e2dc      	b.n	800196e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d008      	beq.n	80013d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2280      	movs	r2, #128	; 0x80
 80013c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e2cd      	b.n	800196e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a76      	ldr	r2, [pc, #472]	; (80015b0 <HAL_DMA_Abort+0x214>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d04a      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a74      	ldr	r2, [pc, #464]	; (80015b4 <HAL_DMA_Abort+0x218>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d045      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a73      	ldr	r2, [pc, #460]	; (80015b8 <HAL_DMA_Abort+0x21c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d040      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a71      	ldr	r2, [pc, #452]	; (80015bc <HAL_DMA_Abort+0x220>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d03b      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a70      	ldr	r2, [pc, #448]	; (80015c0 <HAL_DMA_Abort+0x224>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d036      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a6e      	ldr	r2, [pc, #440]	; (80015c4 <HAL_DMA_Abort+0x228>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d031      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6d      	ldr	r2, [pc, #436]	; (80015c8 <HAL_DMA_Abort+0x22c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d02c      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a6b      	ldr	r2, [pc, #428]	; (80015cc <HAL_DMA_Abort+0x230>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d027      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6a      	ldr	r2, [pc, #424]	; (80015d0 <HAL_DMA_Abort+0x234>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d022      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a68      	ldr	r2, [pc, #416]	; (80015d4 <HAL_DMA_Abort+0x238>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01d      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a67      	ldr	r2, [pc, #412]	; (80015d8 <HAL_DMA_Abort+0x23c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d018      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a65      	ldr	r2, [pc, #404]	; (80015dc <HAL_DMA_Abort+0x240>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a64      	ldr	r2, [pc, #400]	; (80015e0 <HAL_DMA_Abort+0x244>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00e      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a62      	ldr	r2, [pc, #392]	; (80015e4 <HAL_DMA_Abort+0x248>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d009      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a61      	ldr	r2, [pc, #388]	; (80015e8 <HAL_DMA_Abort+0x24c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d004      	beq.n	8001472 <HAL_DMA_Abort+0xd6>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a5f      	ldr	r2, [pc, #380]	; (80015ec <HAL_DMA_Abort+0x250>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_DMA_Abort+0xda>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_DMA_Abort+0xdc>
 8001476:	2300      	movs	r3, #0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 021e 	bic.w	r2, r2, #30
 800148a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800149a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e00a      	b.n	80014ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 020e 	bic.w	r2, r2, #14
 80014b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a3c      	ldr	r2, [pc, #240]	; (80015b0 <HAL_DMA_Abort+0x214>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d072      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a3a      	ldr	r2, [pc, #232]	; (80015b4 <HAL_DMA_Abort+0x218>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d06d      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <HAL_DMA_Abort+0x21c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d068      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a37      	ldr	r2, [pc, #220]	; (80015bc <HAL_DMA_Abort+0x220>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d063      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a36      	ldr	r2, [pc, #216]	; (80015c0 <HAL_DMA_Abort+0x224>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d05e      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a34      	ldr	r2, [pc, #208]	; (80015c4 <HAL_DMA_Abort+0x228>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d059      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <HAL_DMA_Abort+0x22c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d054      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a31      	ldr	r2, [pc, #196]	; (80015cc <HAL_DMA_Abort+0x230>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d04f      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <HAL_DMA_Abort+0x234>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d04a      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a2e      	ldr	r2, [pc, #184]	; (80015d4 <HAL_DMA_Abort+0x238>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d045      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a2d      	ldr	r2, [pc, #180]	; (80015d8 <HAL_DMA_Abort+0x23c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d040      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a2b      	ldr	r2, [pc, #172]	; (80015dc <HAL_DMA_Abort+0x240>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d03b      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a2a      	ldr	r2, [pc, #168]	; (80015e0 <HAL_DMA_Abort+0x244>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d036      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <HAL_DMA_Abort+0x248>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d031      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_DMA_Abort+0x24c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d02c      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a25      	ldr	r2, [pc, #148]	; (80015ec <HAL_DMA_Abort+0x250>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d027      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <HAL_DMA_Abort+0x254>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d022      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <HAL_DMA_Abort+0x258>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01d      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <HAL_DMA_Abort+0x25c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d018      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <HAL_DMA_Abort+0x260>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <HAL_DMA_Abort+0x264>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00e      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <HAL_DMA_Abort+0x268>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d009      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <HAL_DMA_Abort+0x26c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d004      	beq.n	80015aa <HAL_DMA_Abort+0x20e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_DMA_Abort+0x270>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d132      	bne.n	8001610 <HAL_DMA_Abort+0x274>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e031      	b.n	8001612 <HAL_DMA_Abort+0x276>
 80015ae:	bf00      	nop
 80015b0:	40020010 	.word	0x40020010
 80015b4:	40020028 	.word	0x40020028
 80015b8:	40020040 	.word	0x40020040
 80015bc:	40020058 	.word	0x40020058
 80015c0:	40020070 	.word	0x40020070
 80015c4:	40020088 	.word	0x40020088
 80015c8:	400200a0 	.word	0x400200a0
 80015cc:	400200b8 	.word	0x400200b8
 80015d0:	40020410 	.word	0x40020410
 80015d4:	40020428 	.word	0x40020428
 80015d8:	40020440 	.word	0x40020440
 80015dc:	40020458 	.word	0x40020458
 80015e0:	40020470 	.word	0x40020470
 80015e4:	40020488 	.word	0x40020488
 80015e8:	400204a0 	.word	0x400204a0
 80015ec:	400204b8 	.word	0x400204b8
 80015f0:	58025408 	.word	0x58025408
 80015f4:	5802541c 	.word	0x5802541c
 80015f8:	58025430 	.word	0x58025430
 80015fc:	58025444 	.word	0x58025444
 8001600:	58025458 	.word	0x58025458
 8001604:	5802546c 	.word	0x5802546c
 8001608:	58025480 	.word	0x58025480
 800160c:	58025494 	.word	0x58025494
 8001610:	2300      	movs	r3, #0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001624:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a6d      	ldr	r2, [pc, #436]	; (80017e0 <HAL_DMA_Abort+0x444>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a6b      	ldr	r2, [pc, #428]	; (80017e4 <HAL_DMA_Abort+0x448>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6a      	ldr	r2, [pc, #424]	; (80017e8 <HAL_DMA_Abort+0x44c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a68      	ldr	r2, [pc, #416]	; (80017ec <HAL_DMA_Abort+0x450>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a67      	ldr	r2, [pc, #412]	; (80017f0 <HAL_DMA_Abort+0x454>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a65      	ldr	r2, [pc, #404]	; (80017f4 <HAL_DMA_Abort+0x458>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a64      	ldr	r2, [pc, #400]	; (80017f8 <HAL_DMA_Abort+0x45c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a62      	ldr	r2, [pc, #392]	; (80017fc <HAL_DMA_Abort+0x460>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a61      	ldr	r2, [pc, #388]	; (8001800 <HAL_DMA_Abort+0x464>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a5f      	ldr	r2, [pc, #380]	; (8001804 <HAL_DMA_Abort+0x468>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a5e      	ldr	r2, [pc, #376]	; (8001808 <HAL_DMA_Abort+0x46c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a5c      	ldr	r2, [pc, #368]	; (800180c <HAL_DMA_Abort+0x470>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a5b      	ldr	r2, [pc, #364]	; (8001810 <HAL_DMA_Abort+0x474>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a59      	ldr	r2, [pc, #356]	; (8001814 <HAL_DMA_Abort+0x478>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a58      	ldr	r2, [pc, #352]	; (8001818 <HAL_DMA_Abort+0x47c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <HAL_DMA_Abort+0x32a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a56      	ldr	r2, [pc, #344]	; (800181c <HAL_DMA_Abort+0x480>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d108      	bne.n	80016d8 <HAL_DMA_Abort+0x33c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0201 	bic.w	r2, r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e007      	b.n	80016e8 <HAL_DMA_Abort+0x34c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80016e8:	e013      	b.n	8001712 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ea:	f7ff fd3b 	bl	8001164 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d90c      	bls.n	8001712 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2220      	movs	r2, #32
 80016fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2203      	movs	r2, #3
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e12d      	b.n	800196e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1e5      	bne.n	80016ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a2f      	ldr	r2, [pc, #188]	; (80017e0 <HAL_DMA_Abort+0x444>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d04a      	beq.n	80017be <HAL_DMA_Abort+0x422>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <HAL_DMA_Abort+0x448>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d045      	beq.n	80017be <HAL_DMA_Abort+0x422>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <HAL_DMA_Abort+0x44c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d040      	beq.n	80017be <HAL_DMA_Abort+0x422>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a2a      	ldr	r2, [pc, #168]	; (80017ec <HAL_DMA_Abort+0x450>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d03b      	beq.n	80017be <HAL_DMA_Abort+0x422>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a29      	ldr	r2, [pc, #164]	; (80017f0 <HAL_DMA_Abort+0x454>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d036      	beq.n	80017be <HAL_DMA_Abort+0x422>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <HAL_DMA_Abort+0x458>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d031      	beq.n	80017be <HAL_DMA_Abort+0x422>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <HAL_DMA_Abort+0x45c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d02c      	beq.n	80017be <HAL_DMA_Abort+0x422>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a24      	ldr	r2, [pc, #144]	; (80017fc <HAL_DMA_Abort+0x460>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d027      	beq.n	80017be <HAL_DMA_Abort+0x422>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a23      	ldr	r2, [pc, #140]	; (8001800 <HAL_DMA_Abort+0x464>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d022      	beq.n	80017be <HAL_DMA_Abort+0x422>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <HAL_DMA_Abort+0x468>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d01d      	beq.n	80017be <HAL_DMA_Abort+0x422>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a20      	ldr	r2, [pc, #128]	; (8001808 <HAL_DMA_Abort+0x46c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d018      	beq.n	80017be <HAL_DMA_Abort+0x422>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a1e      	ldr	r2, [pc, #120]	; (800180c <HAL_DMA_Abort+0x470>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_DMA_Abort+0x422>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_DMA_Abort+0x474>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00e      	beq.n	80017be <HAL_DMA_Abort+0x422>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <HAL_DMA_Abort+0x478>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d009      	beq.n	80017be <HAL_DMA_Abort+0x422>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1a      	ldr	r2, [pc, #104]	; (8001818 <HAL_DMA_Abort+0x47c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d004      	beq.n	80017be <HAL_DMA_Abort+0x422>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a18      	ldr	r2, [pc, #96]	; (800181c <HAL_DMA_Abort+0x480>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_DMA_Abort+0x426>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_DMA_Abort+0x428>
 80017c2:	2300      	movs	r3, #0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d02b      	beq.n	8001820 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	223f      	movs	r2, #63	; 0x3f
 80017d8:	409a      	lsls	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	e02a      	b.n	8001836 <HAL_DMA_Abort+0x49a>
 80017e0:	40020010 	.word	0x40020010
 80017e4:	40020028 	.word	0x40020028
 80017e8:	40020040 	.word	0x40020040
 80017ec:	40020058 	.word	0x40020058
 80017f0:	40020070 	.word	0x40020070
 80017f4:	40020088 	.word	0x40020088
 80017f8:	400200a0 	.word	0x400200a0
 80017fc:	400200b8 	.word	0x400200b8
 8001800:	40020410 	.word	0x40020410
 8001804:	40020428 	.word	0x40020428
 8001808:	40020440 	.word	0x40020440
 800180c:	40020458 	.word	0x40020458
 8001810:	40020470 	.word	0x40020470
 8001814:	40020488 	.word	0x40020488
 8001818:	400204a0 	.word	0x400204a0
 800181c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	2201      	movs	r2, #1
 8001830:	409a      	lsls	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a4f      	ldr	r2, [pc, #316]	; (8001978 <HAL_DMA_Abort+0x5dc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d072      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a4d      	ldr	r2, [pc, #308]	; (800197c <HAL_DMA_Abort+0x5e0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d06d      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a4c      	ldr	r2, [pc, #304]	; (8001980 <HAL_DMA_Abort+0x5e4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d068      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a4a      	ldr	r2, [pc, #296]	; (8001984 <HAL_DMA_Abort+0x5e8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d063      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_DMA_Abort+0x5ec>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d05e      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a47      	ldr	r2, [pc, #284]	; (800198c <HAL_DMA_Abort+0x5f0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d059      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a46      	ldr	r2, [pc, #280]	; (8001990 <HAL_DMA_Abort+0x5f4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d054      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a44      	ldr	r2, [pc, #272]	; (8001994 <HAL_DMA_Abort+0x5f8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d04f      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a43      	ldr	r2, [pc, #268]	; (8001998 <HAL_DMA_Abort+0x5fc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d04a      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a41      	ldr	r2, [pc, #260]	; (800199c <HAL_DMA_Abort+0x600>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d045      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a40      	ldr	r2, [pc, #256]	; (80019a0 <HAL_DMA_Abort+0x604>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d040      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a3e      	ldr	r2, [pc, #248]	; (80019a4 <HAL_DMA_Abort+0x608>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d03b      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a3d      	ldr	r2, [pc, #244]	; (80019a8 <HAL_DMA_Abort+0x60c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d036      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a3b      	ldr	r2, [pc, #236]	; (80019ac <HAL_DMA_Abort+0x610>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d031      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a3a      	ldr	r2, [pc, #232]	; (80019b0 <HAL_DMA_Abort+0x614>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d02c      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a38      	ldr	r2, [pc, #224]	; (80019b4 <HAL_DMA_Abort+0x618>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d027      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a37      	ldr	r2, [pc, #220]	; (80019b8 <HAL_DMA_Abort+0x61c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d022      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a35      	ldr	r2, [pc, #212]	; (80019bc <HAL_DMA_Abort+0x620>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01d      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <HAL_DMA_Abort+0x624>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d018      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <HAL_DMA_Abort+0x628>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a31      	ldr	r2, [pc, #196]	; (80019c8 <HAL_DMA_Abort+0x62c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00e      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2f      	ldr	r2, [pc, #188]	; (80019cc <HAL_DMA_Abort+0x630>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d009      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a2e      	ldr	r2, [pc, #184]	; (80019d0 <HAL_DMA_Abort+0x634>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d004      	beq.n	8001926 <HAL_DMA_Abort+0x58a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <HAL_DMA_Abort+0x638>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_DMA_Abort+0x58e>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_DMA_Abort+0x590>
 800192a:	2300      	movs	r3, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d015      	beq.n	800195c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001938:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00c      	beq.n	800195c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800194c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001950:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800195a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40020010 	.word	0x40020010
 800197c:	40020028 	.word	0x40020028
 8001980:	40020040 	.word	0x40020040
 8001984:	40020058 	.word	0x40020058
 8001988:	40020070 	.word	0x40020070
 800198c:	40020088 	.word	0x40020088
 8001990:	400200a0 	.word	0x400200a0
 8001994:	400200b8 	.word	0x400200b8
 8001998:	40020410 	.word	0x40020410
 800199c:	40020428 	.word	0x40020428
 80019a0:	40020440 	.word	0x40020440
 80019a4:	40020458 	.word	0x40020458
 80019a8:	40020470 	.word	0x40020470
 80019ac:	40020488 	.word	0x40020488
 80019b0:	400204a0 	.word	0x400204a0
 80019b4:	400204b8 	.word	0x400204b8
 80019b8:	58025408 	.word	0x58025408
 80019bc:	5802541c 	.word	0x5802541c
 80019c0:	58025430 	.word	0x58025430
 80019c4:	58025444 	.word	0x58025444
 80019c8:	58025458 	.word	0x58025458
 80019cc:	5802546c 	.word	0x5802546c
 80019d0:	58025480 	.word	0x58025480
 80019d4:	58025494 	.word	0x58025494

080019d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e237      	b.n	8001e5a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d004      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e22c      	b.n	8001e5a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a5c      	ldr	r2, [pc, #368]	; (8001b78 <HAL_DMA_Abort_IT+0x1a0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d04a      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a5b      	ldr	r2, [pc, #364]	; (8001b7c <HAL_DMA_Abort_IT+0x1a4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d045      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a59      	ldr	r2, [pc, #356]	; (8001b80 <HAL_DMA_Abort_IT+0x1a8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d040      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_DMA_Abort_IT+0x1ac>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d03b      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a56      	ldr	r2, [pc, #344]	; (8001b88 <HAL_DMA_Abort_IT+0x1b0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d036      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a55      	ldr	r2, [pc, #340]	; (8001b8c <HAL_DMA_Abort_IT+0x1b4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d031      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a53      	ldr	r2, [pc, #332]	; (8001b90 <HAL_DMA_Abort_IT+0x1b8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d02c      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a52      	ldr	r2, [pc, #328]	; (8001b94 <HAL_DMA_Abort_IT+0x1bc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d027      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a50      	ldr	r2, [pc, #320]	; (8001b98 <HAL_DMA_Abort_IT+0x1c0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d022      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <HAL_DMA_Abort_IT+0x1c4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d01d      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a4d      	ldr	r2, [pc, #308]	; (8001ba0 <HAL_DMA_Abort_IT+0x1c8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d018      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a4c      	ldr	r2, [pc, #304]	; (8001ba4 <HAL_DMA_Abort_IT+0x1cc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ba8 <HAL_DMA_Abort_IT+0x1d0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00e      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a49      	ldr	r2, [pc, #292]	; (8001bac <HAL_DMA_Abort_IT+0x1d4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d009      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a47      	ldr	r2, [pc, #284]	; (8001bb0 <HAL_DMA_Abort_IT+0x1d8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a46      	ldr	r2, [pc, #280]	; (8001bb4 <HAL_DMA_Abort_IT+0x1dc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_DMA_Abort_IT+0xcc>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_DMA_Abort_IT+0xce>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8086 	beq.w	8001bb8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2f      	ldr	r2, [pc, #188]	; (8001b78 <HAL_DMA_Abort_IT+0x1a0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d04a      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <HAL_DMA_Abort_IT+0x1a4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d045      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a2c      	ldr	r2, [pc, #176]	; (8001b80 <HAL_DMA_Abort_IT+0x1a8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d040      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <HAL_DMA_Abort_IT+0x1ac>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d03b      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <HAL_DMA_Abort_IT+0x1b0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d036      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <HAL_DMA_Abort_IT+0x1b4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d031      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <HAL_DMA_Abort_IT+0x1b8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d02c      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a25      	ldr	r2, [pc, #148]	; (8001b94 <HAL_DMA_Abort_IT+0x1bc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d027      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <HAL_DMA_Abort_IT+0x1c0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d022      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <HAL_DMA_Abort_IT+0x1c4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d01d      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <HAL_DMA_Abort_IT+0x1c8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d018      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_DMA_Abort_IT+0x1cc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d013      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <HAL_DMA_Abort_IT+0x1d0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00e      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_DMA_Abort_IT+0x1d4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d009      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_DMA_Abort_IT+0x1d8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d004      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x17c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_DMA_Abort_IT+0x1dc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d108      	bne.n	8001b66 <HAL_DMA_Abort_IT+0x18e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e178      	b.n	8001e58 <HAL_DMA_Abort_IT+0x480>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	e16f      	b.n	8001e58 <HAL_DMA_Abort_IT+0x480>
 8001b78:	40020010 	.word	0x40020010
 8001b7c:	40020028 	.word	0x40020028
 8001b80:	40020040 	.word	0x40020040
 8001b84:	40020058 	.word	0x40020058
 8001b88:	40020070 	.word	0x40020070
 8001b8c:	40020088 	.word	0x40020088
 8001b90:	400200a0 	.word	0x400200a0
 8001b94:	400200b8 	.word	0x400200b8
 8001b98:	40020410 	.word	0x40020410
 8001b9c:	40020428 	.word	0x40020428
 8001ba0:	40020440 	.word	0x40020440
 8001ba4:	40020458 	.word	0x40020458
 8001ba8:	40020470 	.word	0x40020470
 8001bac:	40020488 	.word	0x40020488
 8001bb0:	400204a0 	.word	0x400204a0
 8001bb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 020e 	bic.w	r2, r2, #14
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a6c      	ldr	r2, [pc, #432]	; (8001d80 <HAL_DMA_Abort_IT+0x3a8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d04a      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a6b      	ldr	r2, [pc, #428]	; (8001d84 <HAL_DMA_Abort_IT+0x3ac>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d045      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a69      	ldr	r2, [pc, #420]	; (8001d88 <HAL_DMA_Abort_IT+0x3b0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d040      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a68      	ldr	r2, [pc, #416]	; (8001d8c <HAL_DMA_Abort_IT+0x3b4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d03b      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a66      	ldr	r2, [pc, #408]	; (8001d90 <HAL_DMA_Abort_IT+0x3b8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d036      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a65      	ldr	r2, [pc, #404]	; (8001d94 <HAL_DMA_Abort_IT+0x3bc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d031      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a63      	ldr	r2, [pc, #396]	; (8001d98 <HAL_DMA_Abort_IT+0x3c0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02c      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a62      	ldr	r2, [pc, #392]	; (8001d9c <HAL_DMA_Abort_IT+0x3c4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d027      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a60      	ldr	r2, [pc, #384]	; (8001da0 <HAL_DMA_Abort_IT+0x3c8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a5f      	ldr	r2, [pc, #380]	; (8001da4 <HAL_DMA_Abort_IT+0x3cc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d01d      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a5d      	ldr	r2, [pc, #372]	; (8001da8 <HAL_DMA_Abort_IT+0x3d0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d018      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a5c      	ldr	r2, [pc, #368]	; (8001dac <HAL_DMA_Abort_IT+0x3d4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a5a      	ldr	r2, [pc, #360]	; (8001db0 <HAL_DMA_Abort_IT+0x3d8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a59      	ldr	r2, [pc, #356]	; (8001db4 <HAL_DMA_Abort_IT+0x3dc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a57      	ldr	r2, [pc, #348]	; (8001db8 <HAL_DMA_Abort_IT+0x3e0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x290>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <HAL_DMA_Abort_IT+0x3e4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d108      	bne.n	8001c7a <HAL_DMA_Abort_IT+0x2a2>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e007      	b.n	8001c8a <HAL_DMA_Abort_IT+0x2b2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a3c      	ldr	r2, [pc, #240]	; (8001d80 <HAL_DMA_Abort_IT+0x3a8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d072      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a3a      	ldr	r2, [pc, #232]	; (8001d84 <HAL_DMA_Abort_IT+0x3ac>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d06d      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a39      	ldr	r2, [pc, #228]	; (8001d88 <HAL_DMA_Abort_IT+0x3b0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d068      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <HAL_DMA_Abort_IT+0x3b4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d063      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a36      	ldr	r2, [pc, #216]	; (8001d90 <HAL_DMA_Abort_IT+0x3b8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d05e      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <HAL_DMA_Abort_IT+0x3bc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d059      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <HAL_DMA_Abort_IT+0x3c0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d054      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <HAL_DMA_Abort_IT+0x3c4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d04f      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a30      	ldr	r2, [pc, #192]	; (8001da0 <HAL_DMA_Abort_IT+0x3c8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d04a      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2e      	ldr	r2, [pc, #184]	; (8001da4 <HAL_DMA_Abort_IT+0x3cc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d045      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2d      	ldr	r2, [pc, #180]	; (8001da8 <HAL_DMA_Abort_IT+0x3d0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d040      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <HAL_DMA_Abort_IT+0x3d4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d03b      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a2a      	ldr	r2, [pc, #168]	; (8001db0 <HAL_DMA_Abort_IT+0x3d8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d036      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <HAL_DMA_Abort_IT+0x3dc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d031      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_DMA_Abort_IT+0x3e0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d02c      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <HAL_DMA_Abort_IT+0x3e4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d027      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <HAL_DMA_Abort_IT+0x3e8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d022      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <HAL_DMA_Abort_IT+0x3ec>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01d      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_DMA_Abort_IT+0x3f0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d018      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_DMA_Abort_IT+0x3f4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <HAL_DMA_Abort_IT+0x3f8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00e      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_DMA_Abort_IT+0x3fc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_DMA_Abort_IT+0x400>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d004      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x3a2>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <HAL_DMA_Abort_IT+0x404>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d132      	bne.n	8001de0 <HAL_DMA_Abort_IT+0x408>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e031      	b.n	8001de2 <HAL_DMA_Abort_IT+0x40a>
 8001d7e:	bf00      	nop
 8001d80:	40020010 	.word	0x40020010
 8001d84:	40020028 	.word	0x40020028
 8001d88:	40020040 	.word	0x40020040
 8001d8c:	40020058 	.word	0x40020058
 8001d90:	40020070 	.word	0x40020070
 8001d94:	40020088 	.word	0x40020088
 8001d98:	400200a0 	.word	0x400200a0
 8001d9c:	400200b8 	.word	0x400200b8
 8001da0:	40020410 	.word	0x40020410
 8001da4:	40020428 	.word	0x40020428
 8001da8:	40020440 	.word	0x40020440
 8001dac:	40020458 	.word	0x40020458
 8001db0:	40020470 	.word	0x40020470
 8001db4:	40020488 	.word	0x40020488
 8001db8:	400204a0 	.word	0x400204a0
 8001dbc:	400204b8 	.word	0x400204b8
 8001dc0:	58025408 	.word	0x58025408
 8001dc4:	5802541c 	.word	0x5802541c
 8001dc8:	58025430 	.word	0x58025430
 8001dcc:	58025444 	.word	0x58025444
 8001dd0:	58025458 	.word	0x58025458
 8001dd4:	5802546c 	.word	0x5802546c
 8001dd8:	58025480 	.word	0x58025480
 8001ddc:	58025494 	.word	0x58025494
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d028      	beq.n	8001e38 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	2201      	movs	r2, #1
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00c      	beq.n	8001e38 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_GPIO_Init+0x234>)
 8001e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e76:	e194      	b.n	80021a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8186 	beq.w	800219c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d005      	beq.n	8001ea8 <HAL_GPIO_Init+0x44>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d130      	bne.n	8001f0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ede:	2201      	movs	r2, #1
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	f003 0201 	and.w	r2, r3, #1
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d017      	beq.n	8001f46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d123      	bne.n	8001f9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3208      	adds	r2, #8
 8001f94:	69b9      	ldr	r1, [r7, #24]
 8001f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0203 	and.w	r2, r3, #3
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80e0 	beq.w	800219c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	; (800209c <HAL_GPIO_Init+0x238>)
 8001fde:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001fe2:	4a2e      	ldr	r2, [pc, #184]	; (800209c <HAL_GPIO_Init+0x238>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <HAL_GPIO_Init+0x238>)
 8001fee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffa:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_GPIO_Init+0x23c>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a20      	ldr	r2, [pc, #128]	; (80020a4 <HAL_GPIO_Init+0x240>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d052      	beq.n	80020cc <HAL_GPIO_Init+0x268>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_GPIO_Init+0x244>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d031      	beq.n	8002092 <HAL_GPIO_Init+0x22e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <HAL_GPIO_Init+0x248>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <HAL_GPIO_Init+0x22a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_GPIO_Init+0x24c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d025      	beq.n	800208a <HAL_GPIO_Init+0x226>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <HAL_GPIO_Init+0x250>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01f      	beq.n	8002086 <HAL_GPIO_Init+0x222>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <HAL_GPIO_Init+0x254>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x21e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_GPIO_Init+0x258>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x21a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <HAL_GPIO_Init+0x25c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x216>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <HAL_GPIO_Init+0x260>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x212>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_GPIO_Init+0x264>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x20e>
 800206e:	2309      	movs	r3, #9
 8002070:	e02d      	b.n	80020ce <HAL_GPIO_Init+0x26a>
 8002072:	230a      	movs	r3, #10
 8002074:	e02b      	b.n	80020ce <HAL_GPIO_Init+0x26a>
 8002076:	2308      	movs	r3, #8
 8002078:	e029      	b.n	80020ce <HAL_GPIO_Init+0x26a>
 800207a:	2307      	movs	r3, #7
 800207c:	e027      	b.n	80020ce <HAL_GPIO_Init+0x26a>
 800207e:	2306      	movs	r3, #6
 8002080:	e025      	b.n	80020ce <HAL_GPIO_Init+0x26a>
 8002082:	2305      	movs	r3, #5
 8002084:	e023      	b.n	80020ce <HAL_GPIO_Init+0x26a>
 8002086:	2304      	movs	r3, #4
 8002088:	e021      	b.n	80020ce <HAL_GPIO_Init+0x26a>
 800208a:	2303      	movs	r3, #3
 800208c:	e01f      	b.n	80020ce <HAL_GPIO_Init+0x26a>
 800208e:	2302      	movs	r3, #2
 8002090:	e01d      	b.n	80020ce <HAL_GPIO_Init+0x26a>
 8002092:	2301      	movs	r3, #1
 8002094:	e01b      	b.n	80020ce <HAL_GPIO_Init+0x26a>
 8002096:	bf00      	nop
 8002098:	58000080 	.word	0x58000080
 800209c:	58024400 	.word	0x58024400
 80020a0:	58000400 	.word	0x58000400
 80020a4:	58020000 	.word	0x58020000
 80020a8:	58020400 	.word	0x58020400
 80020ac:	58020800 	.word	0x58020800
 80020b0:	58020c00 	.word	0x58020c00
 80020b4:	58021000 	.word	0x58021000
 80020b8:	58021400 	.word	0x58021400
 80020bc:	58021800 	.word	0x58021800
 80020c0:	58021c00 	.word	0x58021c00
 80020c4:	58022000 	.word	0x58022000
 80020c8:	58022400 	.word	0x58022400
 80020cc:	2300      	movs	r3, #0
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	f002 0203 	and.w	r2, r2, #3
 80020d4:	0092      	lsls	r2, r2, #2
 80020d6:	4093      	lsls	r3, r2
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020de:	4938      	ldr	r1, [pc, #224]	; (80021c0 <HAL_GPIO_Init+0x35c>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	3301      	adds	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f ae63 	bne.w	8001e78 <HAL_GPIO_Init+0x14>
  }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	3724      	adds	r7, #36	; 0x24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	58000400 	.word	0x58000400

080021c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	2b06      	cmp	r3, #6
 80021d6:	d00a      	beq.n	80021ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d001      	beq.n	80021ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e040      	b.n	800226c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e03e      	b.n	800226c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80021f6:	491f      	ldr	r1, [pc, #124]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021fe:	f7fe ffb1 	bl	8001164 <HAL_GetTick>
 8002202:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002204:	e009      	b.n	800221a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002206:	f7fe ffad 	bl	8001164 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002214:	d901      	bls.n	800221a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e028      	b.n	800226c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002226:	d1ee      	bne.n	8002206 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b1e      	cmp	r3, #30
 800222c:	d008      	beq.n	8002240 <HAL_PWREx_ConfigSupply+0x7c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b2e      	cmp	r3, #46	; 0x2e
 8002232:	d005      	beq.n	8002240 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b1d      	cmp	r3, #29
 8002238:	d002      	beq.n	8002240 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b2d      	cmp	r3, #45	; 0x2d
 800223e:	d114      	bne.n	800226a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002240:	f7fe ff90 	bl	8001164 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002246:	e009      	b.n	800225c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002248:	f7fe ff8c 	bl	8001164 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002256:	d901      	bls.n	800225c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e007      	b.n	800226c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d1ee      	bne.n	8002248 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	58024800 	.word	0x58024800

08002278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f000 bc1f 	b.w	8002aca <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80b3 	beq.w	8002400 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229a:	4b95      	ldr	r3, [pc, #596]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022a4:	4b92      	ldr	r3, [pc, #584]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d007      	beq.n	80022c0 <HAL_RCC_OscConfig+0x48>
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	2b18      	cmp	r3, #24
 80022b4:	d112      	bne.n	80022dc <HAL_RCC_OscConfig+0x64>
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d10d      	bne.n	80022dc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	4b8b      	ldr	r3, [pc, #556]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8098 	beq.w	80023fe <HAL_RCC_OscConfig+0x186>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 8093 	bne.w	80023fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e3f6      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d106      	bne.n	80022f4 <HAL_RCC_OscConfig+0x7c>
 80022e6:	4b82      	ldr	r3, [pc, #520]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a81      	ldr	r2, [pc, #516]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e058      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d112      	bne.n	8002322 <HAL_RCC_OscConfig+0xaa>
 80022fc:	4b7c      	ldr	r3, [pc, #496]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a7b      	ldr	r2, [pc, #492]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b79      	ldr	r3, [pc, #484]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a78      	ldr	r2, [pc, #480]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800230e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a75      	ldr	r2, [pc, #468]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800231a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e041      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232a:	d112      	bne.n	8002352 <HAL_RCC_OscConfig+0xda>
 800232c:	4b70      	ldr	r3, [pc, #448]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6f      	ldr	r2, [pc, #444]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b6d      	ldr	r3, [pc, #436]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6c      	ldr	r2, [pc, #432]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800233e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a69      	ldr	r2, [pc, #420]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800234a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	e029      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800235a:	d112      	bne.n	8002382 <HAL_RCC_OscConfig+0x10a>
 800235c:	4b64      	ldr	r3, [pc, #400]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a63      	ldr	r2, [pc, #396]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002362:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a60      	ldr	r2, [pc, #384]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800236e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b5e      	ldr	r3, [pc, #376]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a5d      	ldr	r2, [pc, #372]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e011      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
 8002382:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a5a      	ldr	r2, [pc, #360]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b58      	ldr	r3, [pc, #352]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a57      	ldr	r2, [pc, #348]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b55      	ldr	r3, [pc, #340]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a54      	ldr	r2, [pc, #336]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80023a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d013      	beq.n	80023d6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7fe fed9 	bl	8001164 <HAL_GetTick>
 80023b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b6:	f7fe fed5 	bl	8001164 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b64      	cmp	r3, #100	; 0x64
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e380      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023c8:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x13e>
 80023d4:	e014      	b.n	8002400 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fec5 	bl	8001164 <HAL_GetTick>
 80023da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023de:	f7fe fec1 	bl	8001164 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	; 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e36c      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023f0:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x166>
 80023fc:	e000      	b.n	8002400 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 808c 	beq.w	8002526 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002416:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002418:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_RCC_OscConfig+0x1bc>
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	2b18      	cmp	r3, #24
 8002428:	d137      	bne.n	800249a <HAL_RCC_OscConfig+0x222>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d132      	bne.n	800249a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002434:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_OscConfig+0x1d4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e33e      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800244c:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 0219 	bic.w	r2, r3, #25
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4925      	ldr	r1, [pc, #148]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fe81 	bl	8001164 <HAL_GetTick>
 8002462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe fe7d 	bl	8001164 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e328      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	061b      	lsls	r3, r3, #24
 8002492:	4917      	ldr	r1, [pc, #92]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002498:	e045      	b.n	8002526 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d028      	beq.n	80024f4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0219 	bic.w	r2, r3, #25
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4910      	ldr	r1, [pc, #64]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fe56 	bl	8001164 <HAL_GetTick>
 80024b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe fe52 	bl	8001164 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e2fd      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	061b      	lsls	r3, r3, #24
 80024e8:	4901      	ldr	r1, [pc, #4]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
 80024ee:	e01a      	b.n	8002526 <HAL_RCC_OscConfig+0x2ae>
 80024f0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f4:	4b97      	ldr	r3, [pc, #604]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a96      	ldr	r2, [pc, #600]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fe30 	bl	8001164 <HAL_GetTick>
 8002504:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002508:	f7fe fe2c 	bl	8001164 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e2d7      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800251a:	4b8e      	ldr	r3, [pc, #568]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d06a      	beq.n	8002608 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002532:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800253a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253c:	4b85      	ldr	r3, [pc, #532]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d007      	beq.n	8002558 <HAL_RCC_OscConfig+0x2e0>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b18      	cmp	r3, #24
 800254c:	d11b      	bne.n	8002586 <HAL_RCC_OscConfig+0x30e>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d116      	bne.n	8002586 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002558:	4b7e      	ldr	r3, [pc, #504]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_OscConfig+0x2f8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e2ac      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002570:	4b78      	ldr	r3, [pc, #480]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	4975      	ldr	r1, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002584:	e040      	b.n	8002608 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d023      	beq.n	80025d6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800258e:	4b71      	ldr	r3, [pc, #452]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a70      	ldr	r2, [pc, #448]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fde3 	bl	8001164 <HAL_GetTick>
 800259e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025a2:	f7fe fddf 	bl	8001164 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e28a      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025b4:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	4961      	ldr	r1, [pc, #388]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60cb      	str	r3, [r1, #12]
 80025d4:	e018      	b.n	8002608 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a5e      	ldr	r2, [pc, #376]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fdbf 	bl	8001164 <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025ea:	f7fe fdbb 	bl	8001164 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e266      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025fc:	4b55      	ldr	r3, [pc, #340]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d036      	beq.n	8002682 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d019      	beq.n	8002650 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261c:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fd9c 	bl	8001164 <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fd98 	bl	8001164 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e243      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002642:	4b44      	ldr	r3, [pc, #272]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x3b8>
 800264e:	e018      	b.n	8002682 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002654:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe fd82 	bl	8001164 <HAL_GetTick>
 8002660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7fe fd7e 	bl	8001164 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e229      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d036      	beq.n	80026fc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d019      	beq.n	80026ca <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002696:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800269c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026a2:	f7fe fd5f 	bl	8001164 <HAL_GetTick>
 80026a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026aa:	f7fe fd5b 	bl	8001164 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e206      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x432>
 80026c8:	e018      	b.n	80026fc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a21      	ldr	r2, [pc, #132]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80026d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026d6:	f7fe fd45 	bl	8001164 <HAL_GetTick>
 80026da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026de:	f7fe fd41 	bl	8001164 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e1ec      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80af 	beq.w	8002868 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_RCC_OscConfig+0x4e0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <HAL_RCC_OscConfig+0x4e0>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002716:	f7fe fd25 	bl	8001164 <HAL_GetTick>
 800271a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe fd21 	bl	8001164 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	; 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1cc      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_OscConfig+0x4e0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d10b      	bne.n	800275c <HAL_RCC_OscConfig+0x4e4>
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a02      	ldr	r2, [pc, #8]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
 8002750:	e05b      	b.n	800280a <HAL_RCC_OscConfig+0x592>
 8002752:	bf00      	nop
 8002754:	58024400 	.word	0x58024400
 8002758:	58024800 	.word	0x58024800
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d112      	bne.n	800278a <HAL_RCC_OscConfig+0x512>
 8002764:	4b9d      	ldr	r3, [pc, #628]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	4a9c      	ldr	r2, [pc, #624]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6713      	str	r3, [r2, #112]	; 0x70
 8002770:	4b9a      	ldr	r3, [pc, #616]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a99      	ldr	r2, [pc, #612]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	4b97      	ldr	r3, [pc, #604]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a96      	ldr	r2, [pc, #600]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002782:	f023 0304 	bic.w	r3, r3, #4
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	e03f      	b.n	800280a <HAL_RCC_OscConfig+0x592>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b05      	cmp	r3, #5
 8002790:	d112      	bne.n	80027b8 <HAL_RCC_OscConfig+0x540>
 8002792:	4b92      	ldr	r3, [pc, #584]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a91      	ldr	r2, [pc, #580]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	4b8f      	ldr	r3, [pc, #572]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a8e      	ldr	r2, [pc, #568]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	4b8c      	ldr	r3, [pc, #560]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a8b      	ldr	r2, [pc, #556]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	e028      	b.n	800280a <HAL_RCC_OscConfig+0x592>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b85      	cmp	r3, #133	; 0x85
 80027be:	d112      	bne.n	80027e6 <HAL_RCC_OscConfig+0x56e>
 80027c0:	4b86      	ldr	r3, [pc, #536]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a85      	ldr	r2, [pc, #532]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	4b83      	ldr	r3, [pc, #524]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a82      	ldr	r2, [pc, #520]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
 80027d8:	4b80      	ldr	r3, [pc, #512]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a7f      	ldr	r2, [pc, #508]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	e011      	b.n	800280a <HAL_RCC_OscConfig+0x592>
 80027e6:	4b7d      	ldr	r3, [pc, #500]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a7c      	ldr	r2, [pc, #496]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	4b7a      	ldr	r3, [pc, #488]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a79      	ldr	r2, [pc, #484]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80027f8:	f023 0304 	bic.w	r3, r3, #4
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	4b77      	ldr	r3, [pc, #476]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a76      	ldr	r2, [pc, #472]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe fca7 	bl	8001164 <HAL_GetTick>
 8002816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe fca3 	bl	8001164 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e14c      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ee      	beq.n	800281a <HAL_RCC_OscConfig+0x5a2>
 800283c:	e014      	b.n	8002868 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283e:	f7fe fc91 	bl	8001164 <HAL_GetTick>
 8002842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe fc8d 	bl	8001164 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e136      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800285c:	4b5f      	ldr	r3, [pc, #380]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 812b 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002872:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800287a:	2b18      	cmp	r3, #24
 800287c:	f000 80bb 	beq.w	80029f6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2b02      	cmp	r3, #2
 8002886:	f040 8095 	bne.w	80029b4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b54      	ldr	r3, [pc, #336]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a53      	ldr	r2, [pc, #332]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fc65 	bl	8001164 <HAL_GetTick>
 800289a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fc61 	bl	8001164 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e10c      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028b0:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f0      	bne.n	800289e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028bc:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80028be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c0:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_OscConfig+0x768>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	430a      	orrs	r2, r1
 80028d0:	4942      	ldr	r1, [pc, #264]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	628b      	str	r3, [r1, #40]	; 0x28
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	3b01      	subs	r3, #1
 80028dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	3b01      	subs	r3, #1
 80028e6:	025b      	lsls	r3, r3, #9
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	3b01      	subs	r3, #1
 80028f2:	041b      	lsls	r3, r3, #16
 80028f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	3b01      	subs	r3, #1
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002906:	4935      	ldr	r1, [pc, #212]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002908:	4313      	orrs	r3, r2
 800290a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800290c:	4b33      	ldr	r3, [pc, #204]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	4a32      	ldr	r2, [pc, #200]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800291a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291c:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800291e:	4013      	ands	r3, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002924:	00d2      	lsls	r2, r2, #3
 8002926:	492d      	ldr	r1, [pc, #180]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002928:	4313      	orrs	r3, r2
 800292a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800292c:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	f023 020c 	bic.w	r2, r3, #12
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	4928      	ldr	r1, [pc, #160]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800293a:	4313      	orrs	r3, r2
 800293c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800293e:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	f023 0202 	bic.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	4924      	ldr	r1, [pc, #144]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800294c:	4313      	orrs	r3, r2
 800294e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	4a21      	ldr	r2, [pc, #132]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800296e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002980:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a15      	ldr	r2, [pc, #84]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 8002986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800298a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fbea 	bl	8001164 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe fbe6 	bl	8001164 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e091      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x71c>
 80029b2:	e089      	b.n	8002ac8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a08      	ldr	r2, [pc, #32]	; (80029dc <HAL_RCC_OscConfig+0x764>)
 80029ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fbd0 	bl	8001164 <HAL_GetTick>
 80029c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029c6:	e00f      	b.n	80029e8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe fbcc 	bl	8001164 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d908      	bls.n	80029e8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e077      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
 80029da:	bf00      	nop
 80029dc:	58024400 	.word	0x58024400
 80029e0:	fffffc0c 	.word	0xfffffc0c
 80029e4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029e8:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_RCC_OscConfig+0x85c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e9      	bne.n	80029c8 <HAL_RCC_OscConfig+0x750>
 80029f4:	e068      	b.n	8002ac8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029f6:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <HAL_RCC_OscConfig+0x85c>)
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029fc:	4b35      	ldr	r3, [pc, #212]	; (8002ad4 <HAL_RCC_OscConfig+0x85c>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d031      	beq.n	8002a6e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d12a      	bne.n	8002a6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d122      	bne.n	8002a6e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d11a      	bne.n	8002a6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	0a5b      	lsrs	r3, r3, #9
 8002a3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a44:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d111      	bne.n	8002a6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d108      	bne.n	8002a6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	0e1b      	lsrs	r3, r3, #24
 8002a60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e02b      	b.n	8002aca <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_RCC_OscConfig+0x85c>)
 8002a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a76:	08db      	lsrs	r3, r3, #3
 8002a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a7c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d01f      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_OscConfig+0x85c>)
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <HAL_RCC_OscConfig+0x85c>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a94:	f7fe fb66 	bl	8001164 <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a9a:	bf00      	nop
 8002a9c:	f7fe fb62 	bl	8001164 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d0f9      	beq.n	8002a9c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_RCC_OscConfig+0x85c>)
 8002aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_RCC_OscConfig+0x860>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ab4:	00d2      	lsls	r2, r2, #3
 8002ab6:	4907      	ldr	r1, [pc, #28]	; (8002ad4 <HAL_RCC_OscConfig+0x85c>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCC_OscConfig+0x85c>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_RCC_OscConfig+0x85c>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3730      	adds	r7, #48	; 0x30
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	58024400 	.word	0x58024400
 8002ad8:	ffff0007 	.word	0xffff0007

08002adc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e19c      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b8a      	ldr	r3, [pc, #552]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d910      	bls.n	8002b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b87      	ldr	r3, [pc, #540]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 020f 	bic.w	r2, r3, #15
 8002b06:	4985      	ldr	r1, [pc, #532]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b83      	ldr	r3, [pc, #524]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e184      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	4b7b      	ldr	r3, [pc, #492]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d908      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b3c:	4b78      	ldr	r3, [pc, #480]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	4975      	ldr	r1, [pc, #468]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d010      	beq.n	8002b7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d908      	bls.n	8002b7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	496a      	ldr	r1, [pc, #424]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d908      	bls.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	495e      	ldr	r1, [pc, #376]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d908      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bc6:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4953      	ldr	r1, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d908      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f023 020f 	bic.w	r2, r3, #15
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4947      	ldr	r1, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d055      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c12:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	4940      	ldr	r1, [pc, #256]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c2c:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d121      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0f6      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d115      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0ea      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0de      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0d6      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c7c:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f023 0207 	bic.w	r2, r3, #7
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4925      	ldr	r1, [pc, #148]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8e:	f7fe fa69 	bl	8001164 <HAL_GetTick>
 8002c92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c96:	f7fe fa65 	bl	8001164 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0be      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d1eb      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d208      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f023 020f 	bic.w	r2, r3, #15
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d214      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 020f 	bic.w	r2, r3, #15
 8002d02:	4906      	ldr	r1, [pc, #24]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_RCC_ClockConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e086      	b.n	8002e2a <HAL_RCC_ClockConfig+0x34e>
 8002d1c:	52002000 	.word	0x52002000
 8002d20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d010      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	4b3f      	ldr	r3, [pc, #252]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d208      	bcs.n	8002d52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d40:	4b3c      	ldr	r3, [pc, #240]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	4939      	ldr	r1, [pc, #228]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d010      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d208      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	492e      	ldr	r1, [pc, #184]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d010      	beq.n	8002dae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d208      	bcs.n	8002dae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	4922      	ldr	r1, [pc, #136]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d010      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d208      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4917      	ldr	r1, [pc, #92]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ddc:	f000 f834 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	4912      	ldr	r1, [pc, #72]	; (8002e38 <HAL_RCC_ClockConfig+0x35c>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
 8002df8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_RCC_ClockConfig+0x358>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <HAL_RCC_ClockConfig+0x35c>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <HAL_RCC_ClockConfig+0x360>)
 8002e12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_RCC_ClockConfig+0x364>)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_RCC_ClockConfig+0x368>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe f956 	bl	80010d0 <HAL_InitTick>
 8002e24:	4603      	mov	r3, r0
 8002e26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	58024400 	.word	0x58024400
 8002e38:	08008b2c 	.word	0x08008b2c
 8002e3c:	24000004 	.word	0x24000004
 8002e40:	24000000 	.word	0x24000000
 8002e44:	24000008 	.word	0x24000008

08002e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e4e:	4bb3      	ldr	r3, [pc, #716]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e56:	2b18      	cmp	r3, #24
 8002e58:	f200 8155 	bhi.w	8003106 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002ec9 	.word	0x08002ec9
 8002e68:	08003107 	.word	0x08003107
 8002e6c:	08003107 	.word	0x08003107
 8002e70:	08003107 	.word	0x08003107
 8002e74:	08003107 	.word	0x08003107
 8002e78:	08003107 	.word	0x08003107
 8002e7c:	08003107 	.word	0x08003107
 8002e80:	08003107 	.word	0x08003107
 8002e84:	08002eef 	.word	0x08002eef
 8002e88:	08003107 	.word	0x08003107
 8002e8c:	08003107 	.word	0x08003107
 8002e90:	08003107 	.word	0x08003107
 8002e94:	08003107 	.word	0x08003107
 8002e98:	08003107 	.word	0x08003107
 8002e9c:	08003107 	.word	0x08003107
 8002ea0:	08003107 	.word	0x08003107
 8002ea4:	08002ef5 	.word	0x08002ef5
 8002ea8:	08003107 	.word	0x08003107
 8002eac:	08003107 	.word	0x08003107
 8002eb0:	08003107 	.word	0x08003107
 8002eb4:	08003107 	.word	0x08003107
 8002eb8:	08003107 	.word	0x08003107
 8002ebc:	08003107 	.word	0x08003107
 8002ec0:	08003107 	.word	0x08003107
 8002ec4:	08002efb 	.word	0x08002efb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ec8:	4b94      	ldr	r3, [pc, #592]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ed4:	4b91      	ldr	r3, [pc, #580]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	4a90      	ldr	r2, [pc, #576]	; (8003120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ee6:	e111      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ee8:	4b8d      	ldr	r3, [pc, #564]	; (8003120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eea:	61bb      	str	r3, [r7, #24]
      break;
 8002eec:	e10e      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002eee:	4b8d      	ldr	r3, [pc, #564]	; (8003124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ef0:	61bb      	str	r3, [r7, #24]
      break;
 8002ef2:	e10b      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ef4:	4b8c      	ldr	r3, [pc, #560]	; (8003128 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ef6:	61bb      	str	r3, [r7, #24]
      break;
 8002ef8:	e108      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002efa:	4b88      	ldr	r3, [pc, #544]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f04:	4b85      	ldr	r3, [pc, #532]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f10:	4b82      	ldr	r3, [pc, #520]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f1a:	4b80      	ldr	r3, [pc, #512]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	08db      	lsrs	r3, r3, #3
 8002f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80e1 	beq.w	8003100 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	f000 8083 	beq.w	800304c <HAL_RCC_GetSysClockFreq+0x204>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	f200 80a1 	bhi.w	8003090 <HAL_RCC_GetSysClockFreq+0x248>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x114>
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d056      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f5a:	e099      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f5c:	4b6f      	ldr	r3, [pc, #444]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d02d      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f68:	4b6c      	ldr	r3, [pc, #432]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	08db      	lsrs	r3, r3, #3
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	4a6b      	ldr	r2, [pc, #428]	; (8003120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f92:	4b62      	ldr	r3, [pc, #392]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fa6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800312c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002fc2:	e087      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003130 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b51      	ldr	r3, [pc, #324]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800312c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003006:	e065      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003134 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	4b40      	ldr	r3, [pc, #256]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302a:	ed97 6a02 	vldr	s12, [r7, #8]
 800302e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800312c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800303e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800304a:	e043      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003138 <HAL_RCC_GetSysClockFreq+0x2f0>
 800305a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305e:	4b2f      	ldr	r3, [pc, #188]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003072:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800312c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800308e:	e021      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003134 <HAL_RCC_GetSysClockFreq+0x2ec>
 800309e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800312c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	0a5b      	lsrs	r3, r3, #9
 80030da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030de:	3301      	adds	r3, #1
 80030e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	ee07 3a90 	vmov	s15, r3
 80030e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80030f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030f8:	ee17 3a90 	vmov	r3, s15
 80030fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80030fe:	e005      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
      break;
 8003104:	e002      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003108:	61bb      	str	r3, [r7, #24]
      break;
 800310a:	bf00      	nop
  }

  return sysclockfreq;
 800310c:	69bb      	ldr	r3, [r7, #24]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	58024400 	.word	0x58024400
 8003120:	03d09000 	.word	0x03d09000
 8003124:	003d0900 	.word	0x003d0900
 8003128:	007a1200 	.word	0x007a1200
 800312c:	46000000 	.word	0x46000000
 8003130:	4c742400 	.word	0x4c742400
 8003134:	4a742400 	.word	0x4a742400
 8003138:	4af42400 	.word	0x4af42400

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003142:	f7ff fe81 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8003146:	4602      	mov	r2, r0
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <HAL_RCC_GetHCLKFreq+0x50>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	490f      	ldr	r1, [pc, #60]	; (8003190 <HAL_RCC_GetHCLKFreq+0x54>)
 8003154:	5ccb      	ldrb	r3, [r1, r3]
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_RCC_GetHCLKFreq+0x50>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	4a09      	ldr	r2, [pc, #36]	; (8003190 <HAL_RCC_GetHCLKFreq+0x54>)
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	4a07      	ldr	r2, [pc, #28]	; (8003194 <HAL_RCC_GetHCLKFreq+0x58>)
 8003178:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_RCC_GetHCLKFreq+0x5c>)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_GetHCLKFreq+0x58>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	58024400 	.word	0x58024400
 8003190:	08008b2c 	.word	0x08008b2c
 8003194:	24000004 	.word	0x24000004
 8003198:	24000000 	.word	0x24000000

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80031a0:	f7ff ffcc 	bl	800313c <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4904      	ldr	r1, [pc, #16]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	58024400 	.word	0x58024400
 80031c4:	08008b2c 	.word	0x08008b2c

080031c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80031cc:	f7ff ffb6 	bl	800313c <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4904      	ldr	r1, [pc, #16]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	58024400 	.word	0x58024400
 80031f0:	08008b2c 	.word	0x08008b2c

080031f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f8:	b0c8      	sub	sp, #288	; 0x120
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003200:	2300      	movs	r3, #0
 8003202:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003206:	2300      	movs	r3, #0
 8003208:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800320c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003218:	2500      	movs	r5, #0
 800321a:	ea54 0305 	orrs.w	r3, r4, r5
 800321e:	d049      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003226:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800322a:	d02f      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800322c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003230:	d828      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003236:	d01a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800323c:	d822      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003246:	d007      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003248:	e01c      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800324a:	4ba7      	ldr	r3, [pc, #668]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	4aa6      	ldr	r2, [pc, #664]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003254:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003256:	e01a      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800325c:	3308      	adds	r3, #8
 800325e:	2102      	movs	r1, #2
 8003260:	4618      	mov	r0, r3
 8003262:	f001 fc43 	bl	8004aec <RCCEx_PLL2_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800326c:	e00f      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800326e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003272:	3328      	adds	r3, #40	; 0x28
 8003274:	2102      	movs	r1, #2
 8003276:	4618      	mov	r0, r3
 8003278:	f001 fcea 	bl	8004c50 <RCCEx_PLL3_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003282:	e004      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800328a:	e000      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800328c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003296:	4b94      	ldr	r3, [pc, #592]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800329e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a4:	4a90      	ldr	r2, [pc, #576]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6513      	str	r3, [r2, #80]	; 0x50
 80032aa:	e003      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80032c0:	f04f 0900 	mov.w	r9, #0
 80032c4:	ea58 0309 	orrs.w	r3, r8, r9
 80032c8:	d047      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d82a      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	080032f1 	.word	0x080032f1
 80032e0:	080032ff 	.word	0x080032ff
 80032e4:	08003315 	.word	0x08003315
 80032e8:	08003333 	.word	0x08003333
 80032ec:	08003333 	.word	0x08003333
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f0:	4b7d      	ldr	r3, [pc, #500]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	4a7c      	ldr	r2, [pc, #496]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032fc:	e01a      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003302:	3308      	adds	r3, #8
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f001 fbf0 	bl	8004aec <RCCEx_PLL2_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003312:	e00f      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003318:	3328      	adds	r3, #40	; 0x28
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f001 fc97 	bl	8004c50 <RCCEx_PLL3_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003328:	e004      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003330:	e000      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003334:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800333c:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	f023 0107 	bic.w	r1, r3, #7
 8003344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	4a67      	ldr	r2, [pc, #412]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800334c:	430b      	orrs	r3, r1
 800334e:	6513      	str	r3, [r2, #80]	; 0x50
 8003350:	e003      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003352:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003356:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800335a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003366:	f04f 0b00 	mov.w	fp, #0
 800336a:	ea5a 030b 	orrs.w	r3, sl, fp
 800336e:	d054      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003376:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800337a:	d036      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800337c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003380:	d82f      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003386:	d032      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d829      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800338e:	2bc0      	cmp	r3, #192	; 0xc0
 8003390:	d02f      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003392:	2bc0      	cmp	r3, #192	; 0xc0
 8003394:	d825      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003396:	2b80      	cmp	r3, #128	; 0x80
 8003398:	d018      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800339a:	2b80      	cmp	r3, #128	; 0x80
 800339c:	d821      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d007      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80033a6:	e01c      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a8:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	4a4e      	ldr	r2, [pc, #312]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80033b4:	e01e      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ba:	3308      	adds	r3, #8
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 fb94 	bl	8004aec <RCCEx_PLL2_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80033ca:	e013      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d0:	3328      	adds	r3, #40	; 0x28
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 fc3b 	bl	8004c50 <RCCEx_PLL3_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80033e0:	e008      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033e8:	e004      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80033ea:	bf00      	nop
 80033ec:	e002      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80033f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80033fc:	4b3a      	ldr	r3, [pc, #232]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003400:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340a:	4a37      	ldr	r2, [pc, #220]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800340c:	430b      	orrs	r3, r1
 800340e:	6513      	str	r3, [r2, #80]	; 0x50
 8003410:	e003      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003416:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800341a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003426:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003430:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003434:	460b      	mov	r3, r1
 8003436:	4313      	orrs	r3, r2
 8003438:	d05c      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800343a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003444:	d03b      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003446:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800344a:	d834      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800344c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003450:	d037      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003456:	d82e      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003458:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800345c:	d033      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800345e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003462:	d828      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003468:	d01a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800346a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346e:	d822      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d007      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800347a:	e01c      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003488:	e01e      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800348a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800348e:	3308      	adds	r3, #8
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f001 fb2a 	bl	8004aec <RCCEx_PLL2_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800349e:	e013      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a4:	3328      	adds	r3, #40	; 0x28
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 fbd1 	bl	8004c50 <RCCEx_PLL3_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80034b4:	e008      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034bc:	e004      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80034c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10d      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80034d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034de:	4a02      	ldr	r2, [pc, #8]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6513      	str	r3, [r2, #80]	; 0x50
 80034e4:	e006      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003500:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800350a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800350e:	460b      	mov	r3, r1
 8003510:	4313      	orrs	r3, r2
 8003512:	d03a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	2b30      	cmp	r3, #48	; 0x30
 800351c:	d01f      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800351e:	2b30      	cmp	r3, #48	; 0x30
 8003520:	d819      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003522:	2b20      	cmp	r3, #32
 8003524:	d00c      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003526:	2b20      	cmp	r3, #32
 8003528:	d815      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d019      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800352e:	2b10      	cmp	r3, #16
 8003530:	d111      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003532:	4bae      	ldr	r3, [pc, #696]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	4aad      	ldr	r2, [pc, #692]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800353e:	e011      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003544:	3308      	adds	r3, #8
 8003546:	2102      	movs	r1, #2
 8003548:	4618      	mov	r0, r3
 800354a:	f001 facf 	bl	8004aec <RCCEx_PLL2_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003554:	e006      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800355c:	e002      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003564:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800356c:	4b9f      	ldr	r3, [pc, #636]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800356e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003570:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	4a9c      	ldr	r2, [pc, #624]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800357c:	430b      	orrs	r3, r1
 800357e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003580:	e003      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003582:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003586:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800358a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003596:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800359a:	2300      	movs	r3, #0
 800359c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80035a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4313      	orrs	r3, r2
 80035a8:	d051      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80035aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b4:	d035      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80035b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ba:	d82e      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80035bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035c0:	d031      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80035c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035c6:	d828      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80035c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035cc:	d01a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80035ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d2:	d822      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80035d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035dc:	d007      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80035de:	e01c      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e0:	4b82      	ldr	r3, [pc, #520]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4a81      	ldr	r2, [pc, #516]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035ec:	e01c      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f2:	3308      	adds	r3, #8
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fa78 	bl	8004aec <RCCEx_PLL2_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003602:	e011      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003608:	3328      	adds	r3, #40	; 0x28
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fb1f 	bl	8004c50 <RCCEx_PLL3_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003620:	e002      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003628:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003630:	4b6e      	ldr	r3, [pc, #440]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003634:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363e:	4a6b      	ldr	r2, [pc, #428]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003640:	430b      	orrs	r3, r1
 8003642:	6513      	str	r3, [r2, #80]	; 0x50
 8003644:	e003      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003646:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800364a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800364e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800365a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800365e:	2300      	movs	r3, #0
 8003660:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003664:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003668:	460b      	mov	r3, r1
 800366a:	4313      	orrs	r3, r2
 800366c:	d053      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800366e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003678:	d033      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800367a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800367e:	d82c      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003684:	d02f      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003686:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800368a:	d826      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800368c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003690:	d02b      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003692:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003696:	d820      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800369c:	d012      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800369e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036a2:	d81a      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d022      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d115      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b2:	3308      	adds	r3, #8
 80036b4:	2101      	movs	r1, #1
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fa18 	bl	8004aec <RCCEx_PLL2_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80036c2:	e015      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c8:	3328      	adds	r3, #40	; 0x28
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 fabf 	bl	8004c50 <RCCEx_PLL3_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80036d8:	e00a      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80036e2:	bf00      	nop
 80036e4:	e004      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80036e6:	bf00      	nop
 80036e8:	e002      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80036ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80036f8:	4b3c      	ldr	r3, [pc, #240]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003706:	4a39      	ldr	r2, [pc, #228]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003708:	430b      	orrs	r3, r1
 800370a:	6513      	str	r3, [r2, #80]	; 0x50
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003712:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003722:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800372c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003730:	460b      	mov	r3, r1
 8003732:	4313      	orrs	r3, r2
 8003734:	d060      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800373a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800373e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003742:	d039      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003744:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003748:	d832      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800374a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800374e:	d035      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003754:	d82c      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375a:	d031      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d826      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003762:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003766:	d02d      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800376c:	d820      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800376e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003772:	d012      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003778:	d81a      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d024      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800377e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003782:	d115      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003788:	3308      	adds	r3, #8
 800378a:	2101      	movs	r1, #1
 800378c:	4618      	mov	r0, r3
 800378e:	f001 f9ad 	bl	8004aec <RCCEx_PLL2_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003798:	e017      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800379a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800379e:	3328      	adds	r3, #40	; 0x28
 80037a0:	2101      	movs	r1, #1
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 fa54 	bl	8004c50 <RCCEx_PLL3_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037ae:	e00c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037b6:	e008      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037b8:	bf00      	nop
 80037ba:	e006      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037bc:	bf00      	nop
 80037be:	e004      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037c0:	bf00      	nop
 80037c2:	e002      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10e      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80037da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037e2:	4a02      	ldr	r2, [pc, #8]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6593      	str	r3, [r2, #88]	; 0x58
 80037e8:	e006      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80037ea:	bf00      	nop
 80037ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800380e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	d037      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003822:	d00e      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003828:	d816      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d018      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800382e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003832:	d111      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003834:	4bc4      	ldr	r3, [pc, #784]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	4ac3      	ldr	r2, [pc, #780]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003840:	e00f      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003846:	3308      	adds	r3, #8
 8003848:	2101      	movs	r1, #1
 800384a:	4618      	mov	r0, r3
 800384c:	f001 f94e 	bl	8004aec <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003856:	e004      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800385e:	e000      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003862:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800386a:	4bb7      	ldr	r3, [pc, #732]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800386c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003878:	4ab3      	ldr	r2, [pc, #716]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800387a:	430b      	orrs	r3, r1
 800387c:	6513      	str	r3, [r2, #80]	; 0x50
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003884:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800389e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d039      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80038a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d81c      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038f5 	.word	0x080038f5
 80038bc:	080038c9 	.word	0x080038c9
 80038c0:	080038d7 	.word	0x080038d7
 80038c4:	080038f5 	.word	0x080038f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c8:	4b9f      	ldr	r3, [pc, #636]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	4a9e      	ldr	r2, [pc, #632]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038d4:	e00f      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038da:	3308      	adds	r3, #8
 80038dc:	2102      	movs	r1, #2
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 f904 	bl	8004aec <RCCEx_PLL2_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038ea:	e004      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80038f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038fe:	4b92      	ldr	r3, [pc, #584]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	f023 0103 	bic.w	r1, r3, #3
 8003906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	4a8e      	ldr	r2, [pc, #568]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800390e:	430b      	orrs	r3, r1
 8003910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003912:	e003      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003918:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800391c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003932:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	f000 8099 	beq.w	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800393e:	4b83      	ldr	r3, [pc, #524]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a82      	ldr	r2, [pc, #520]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003948:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800394a:	f7fd fc0b 	bl	8001164 <HAL_GetTick>
 800394e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003952:	e00b      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003954:	f7fd fc06 	bl	8001164 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b64      	cmp	r3, #100	; 0x64
 8003962:	d903      	bls.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800396a:	e005      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800396c:	4b77      	ldr	r3, [pc, #476]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0ed      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800397c:	2b00      	cmp	r3, #0
 800397e:	d173      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003980:	4b71      	ldr	r3, [pc, #452]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800398c:	4053      	eors	r3, r2
 800398e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003992:	2b00      	cmp	r3, #0
 8003994:	d015      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003996:	4b6c      	ldr	r3, [pc, #432]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039a2:	4b69      	ldr	r3, [pc, #420]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a68      	ldr	r2, [pc, #416]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039ae:	4b66      	ldr	r3, [pc, #408]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039ba:	4a63      	ldr	r2, [pc, #396]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d118      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd fbc8 	bl	8001164 <HAL_GetTick>
 80039d4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039d8:	e00d      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fd fbc3 	bl	8001164 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80039e4:	1ad2      	subs	r2, r2, r3
 80039e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d903      	bls.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80039f4:	e005      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f6:	4b54      	ldr	r3, [pc, #336]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0eb      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003a02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d129      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a1a:	d10e      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a2c:	091a      	lsrs	r2, r3, #4
 8003a2e:	4b48      	ldr	r3, [pc, #288]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	4a45      	ldr	r2, [pc, #276]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6113      	str	r3, [r2, #16]
 8003a38:	e005      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003a3a:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	4a42      	ldr	r2, [pc, #264]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a44:	6113      	str	r3, [r2, #16]
 8003a46:	4b40      	ldr	r3, [pc, #256]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a56:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5c:	e008      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003a66:	e003      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f002 0301 	and.w	r3, r2, #1
 8003a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f000 8090 	beq.w	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9a:	2b28      	cmp	r3, #40	; 0x28
 8003a9c:	d870      	bhi.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003a9e:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa4:	08003b89 	.word	0x08003b89
 8003aa8:	08003b81 	.word	0x08003b81
 8003aac:	08003b81 	.word	0x08003b81
 8003ab0:	08003b81 	.word	0x08003b81
 8003ab4:	08003b81 	.word	0x08003b81
 8003ab8:	08003b81 	.word	0x08003b81
 8003abc:	08003b81 	.word	0x08003b81
 8003ac0:	08003b81 	.word	0x08003b81
 8003ac4:	08003b55 	.word	0x08003b55
 8003ac8:	08003b81 	.word	0x08003b81
 8003acc:	08003b81 	.word	0x08003b81
 8003ad0:	08003b81 	.word	0x08003b81
 8003ad4:	08003b81 	.word	0x08003b81
 8003ad8:	08003b81 	.word	0x08003b81
 8003adc:	08003b81 	.word	0x08003b81
 8003ae0:	08003b81 	.word	0x08003b81
 8003ae4:	08003b6b 	.word	0x08003b6b
 8003ae8:	08003b81 	.word	0x08003b81
 8003aec:	08003b81 	.word	0x08003b81
 8003af0:	08003b81 	.word	0x08003b81
 8003af4:	08003b81 	.word	0x08003b81
 8003af8:	08003b81 	.word	0x08003b81
 8003afc:	08003b81 	.word	0x08003b81
 8003b00:	08003b81 	.word	0x08003b81
 8003b04:	08003b89 	.word	0x08003b89
 8003b08:	08003b81 	.word	0x08003b81
 8003b0c:	08003b81 	.word	0x08003b81
 8003b10:	08003b81 	.word	0x08003b81
 8003b14:	08003b81 	.word	0x08003b81
 8003b18:	08003b81 	.word	0x08003b81
 8003b1c:	08003b81 	.word	0x08003b81
 8003b20:	08003b81 	.word	0x08003b81
 8003b24:	08003b89 	.word	0x08003b89
 8003b28:	08003b81 	.word	0x08003b81
 8003b2c:	08003b81 	.word	0x08003b81
 8003b30:	08003b81 	.word	0x08003b81
 8003b34:	08003b81 	.word	0x08003b81
 8003b38:	08003b81 	.word	0x08003b81
 8003b3c:	08003b81 	.word	0x08003b81
 8003b40:	08003b81 	.word	0x08003b81
 8003b44:	08003b89 	.word	0x08003b89
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	58024800 	.word	0x58024800
 8003b50:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b58:	3308      	adds	r3, #8
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 ffc5 	bl	8004aec <RCCEx_PLL2_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b68:	e00f      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b6e:	3328      	adds	r3, #40	; 0x28
 8003b70:	2101      	movs	r1, #1
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 f86c 	bl	8004c50 <RCCEx_PLL3_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e004      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b86:	e000      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b92:	4bc0      	ldr	r3, [pc, #768]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba2:	4abc      	ldr	r2, [pc, #752]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6553      	str	r3, [r2, #84]	; 0x54
 8003ba8:	e003      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f002 0302 	and.w	r3, r2, #2
 8003bbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003bc8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	d043      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d824      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003c31 	.word	0x08003c31
 8003be8:	08003bfd 	.word	0x08003bfd
 8003bec:	08003c13 	.word	0x08003c13
 8003bf0:	08003c31 	.word	0x08003c31
 8003bf4:	08003c31 	.word	0x08003c31
 8003bf8:	08003c31 	.word	0x08003c31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c00:	3308      	adds	r3, #8
 8003c02:	2101      	movs	r1, #1
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 ff71 	bl	8004aec <RCCEx_PLL2_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c10:	e00f      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c16:	3328      	adds	r3, #40	; 0x28
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 f818 	bl	8004c50 <RCCEx_PLL3_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c26:	e004      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c3a:	4b96      	ldr	r3, [pc, #600]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f023 0107 	bic.w	r1, r3, #7
 8003c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c4a:	4a92      	ldr	r2, [pc, #584]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6553      	str	r3, [r2, #84]	; 0x54
 8003c50:	e003      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f002 0304 	and.w	r3, r2, #4
 8003c66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c70:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4313      	orrs	r3, r2
 8003c78:	d043      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d824      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003cd9 	.word	0x08003cd9
 8003c90:	08003ca5 	.word	0x08003ca5
 8003c94:	08003cbb 	.word	0x08003cbb
 8003c98:	08003cd9 	.word	0x08003cd9
 8003c9c:	08003cd9 	.word	0x08003cd9
 8003ca0:	08003cd9 	.word	0x08003cd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca8:	3308      	adds	r3, #8
 8003caa:	2101      	movs	r1, #1
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 ff1d 	bl	8004aec <RCCEx_PLL2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003cb8:	e00f      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cbe:	3328      	adds	r3, #40	; 0x28
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 ffc4 	bl	8004c50 <RCCEx_PLL3_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003cce:	e004      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cd6:	e000      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ce2:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	f023 0107 	bic.w	r1, r3, #7
 8003cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cf2:	4a68      	ldr	r2, [pc, #416]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf8:	e003      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cfe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0a:	f002 0320 	and.w	r3, r2, #32
 8003d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	d055      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d2e:	d033      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d34:	d82c      	bhi.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3a:	d02f      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d40:	d826      	bhi.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003d42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d46:	d02b      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003d48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d4c:	d820      	bhi.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d52:	d012      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d58:	d81a      	bhi.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d022      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d62:	d115      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d68:	3308      	adds	r3, #8
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 febd 	bl	8004aec <RCCEx_PLL2_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d78:	e015      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7e:	3328      	adds	r3, #40	; 0x28
 8003d80:	2102      	movs	r1, #2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 ff64 	bl	8004c50 <RCCEx_PLL3_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d96:	e006      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d98:	bf00      	nop
 8003d9a:	e004      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d9c:	bf00      	nop
 8003d9e:	e002      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003da0:	bf00      	nop
 8003da2:	e000      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dae:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dbe:	4a35      	ldr	r2, [pc, #212]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6553      	str	r3, [r2, #84]	; 0x54
 8003dc4:	e003      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003de4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4313      	orrs	r3, r2
 8003dec:	d058      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003df6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003dfa:	d033      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003dfc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e00:	d82c      	bhi.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e06:	d02f      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0c:	d826      	bhi.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003e0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e12:	d02b      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003e14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e18:	d820      	bhi.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1e:	d012      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e24:	d81a      	bhi.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d022      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d115      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e34:	3308      	adds	r3, #8
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fe57 	bl	8004aec <RCCEx_PLL2_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e44:	e015      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4a:	3328      	adds	r3, #40	; 0x28
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fefe 	bl	8004c50 <RCCEx_PLL3_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e62:	e006      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e64:	bf00      	nop
 8003e66:	e004      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e68:	bf00      	nop
 8003e6a:	e002      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e6c:	bf00      	nop
 8003e6e:	e000      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10e      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e8a:	4a02      	ldr	r2, [pc, #8]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e90:	e006      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003e92:	bf00      	nop
 8003e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003eb6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	d055      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ec8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ecc:	d033      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003ece:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ed2:	d82c      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed8:	d02f      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ede:	d826      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003ee0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ee4:	d02b      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ee6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003eea:	d820      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef0:	d012      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef6:	d81a      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d022      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f00:	d115      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f06:	3308      	adds	r3, #8
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fdee 	bl	8004aec <RCCEx_PLL2_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f16:	e015      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f1c:	3328      	adds	r3, #40	; 0x28
 8003f1e:	2102      	movs	r1, #2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fe95 	bl	8004c50 <RCCEx_PLL3_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f34:	e006      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003f36:	bf00      	nop
 8003f38:	e004      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003f3a:	bf00      	nop
 8003f3c:	e002      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003f3e:	bf00      	nop
 8003f40:	e000      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f4c:	4ba1      	ldr	r3, [pc, #644]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f5c:	4a9d      	ldr	r2, [pc, #628]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	6593      	str	r3, [r2, #88]	; 0x58
 8003f62:	e003      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f002 0308 	and.w	r3, r2, #8
 8003f78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003f86:	460b      	mov	r3, r1
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	d01e      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9e:	3328      	adds	r3, #40	; 0x28
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fe54 	bl	8004c50 <RCCEx_PLL3_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003fb4:	4b87      	ldr	r3, [pc, #540]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc4:	4a83      	ldr	r2, [pc, #524]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	f002 0310 	and.w	r3, r2, #16
 8003fd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003fe0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	d01e      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff6:	d10c      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffc:	3328      	adds	r3, #40	; 0x28
 8003ffe:	2102      	movs	r1, #2
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fe25 	bl	8004c50 <RCCEx_PLL3_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004012:	4b70      	ldr	r3, [pc, #448]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800401a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004022:	4a6c      	ldr	r2, [pc, #432]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004024:	430b      	orrs	r3, r1
 8004026:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800403e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d03e      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004054:	d022      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800405a:	d81b      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d00b      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004066:	e015      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406c:	3308      	adds	r3, #8
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fd3b 	bl	8004aec <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800407c:	e00f      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800407e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004082:	3328      	adds	r3, #40	; 0x28
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fde2 	bl	8004c50 <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004092:	e004      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800409c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a6:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80040ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040b6:	4a47      	ldr	r2, [pc, #284]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6593      	str	r3, [r2, #88]	; 0x58
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80040d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80040d4:	2300      	movs	r3, #0
 80040d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80040dc:	460b      	mov	r3, r1
 80040de:	4313      	orrs	r3, r2
 80040e0:	d03b      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80040e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040ee:	d01f      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80040f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040f4:	d818      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80040f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fa:	d003      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80040fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004100:	d007      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004102:	e011      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004104:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	4a32      	ldr	r2, [pc, #200]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004110:	e00f      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004116:	3328      	adds	r3, #40	; 0x28
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fd98 	bl	8004c50 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004126:	e004      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004132:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800413a:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	4a22      	ldr	r2, [pc, #136]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800414c:	430b      	orrs	r3, r1
 800414e:	6553      	str	r3, [r2, #84]	; 0x54
 8004150:	e003      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004156:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800415a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004166:	673b      	str	r3, [r7, #112]	; 0x70
 8004168:	2300      	movs	r3, #0
 800416a:	677b      	str	r3, [r7, #116]	; 0x74
 800416c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004170:	460b      	mov	r3, r1
 8004172:	4313      	orrs	r3, r2
 8004174:	d034      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d007      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004186:	e011      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004188:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	4a11      	ldr	r2, [pc, #68]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800418e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004194:	e00e      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419a:	3308      	adds	r3, #8
 800419c:	2102      	movs	r1, #2
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fca4 	bl	8004aec <RCCEx_PLL2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041aa:	e003      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ca:	4a02      	ldr	r2, [pc, #8]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041cc:	430b      	orrs	r3, r1
 80041ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041d0:	e006      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80041d2:	bf00      	nop
 80041d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80041ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ee:	2300      	movs	r3, #0
 80041f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d00c      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004200:	3328      	adds	r3, #40	; 0x28
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fd23 	bl	8004c50 <RCCEx_PLL3_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004222:	663b      	str	r3, [r7, #96]	; 0x60
 8004224:	2300      	movs	r3, #0
 8004226:	667b      	str	r3, [r7, #100]	; 0x64
 8004228:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d038      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800423e:	d018      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004244:	d811      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424a:	d014      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800424c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004250:	d80b      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d011      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425a:	d106      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425c:	4bc3      	ldr	r3, [pc, #780]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4ac2      	ldr	r2, [pc, #776]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004268:	e008      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004270:	e004      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800427a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004284:	4bb9      	ldr	r3, [pc, #740]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	4ab5      	ldr	r2, [pc, #724]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004296:	430b      	orrs	r3, r1
 8004298:	6553      	str	r3, [r2, #84]	; 0x54
 800429a:	e003      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80042b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80042b2:	2300      	movs	r3, #0
 80042b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80042ba:	460b      	mov	r3, r1
 80042bc:	4313      	orrs	r3, r2
 80042be:	d009      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042c0:	4baa      	ldr	r3, [pc, #680]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80042c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ce:	4aa7      	ldr	r2, [pc, #668]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80042e0:	653b      	str	r3, [r7, #80]	; 0x50
 80042e2:	2300      	movs	r3, #0
 80042e4:	657b      	str	r3, [r7, #84]	; 0x54
 80042e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80042ea:	460b      	mov	r3, r1
 80042ec:	4313      	orrs	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042f0:	4b9e      	ldr	r3, [pc, #632]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80042f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	4a9b      	ldr	r2, [pc, #620]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004300:	430b      	orrs	r3, r1
 8004302:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004310:	64bb      	str	r3, [r7, #72]	; 0x48
 8004312:	2300      	movs	r3, #0
 8004314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004316:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800431a:	460b      	mov	r3, r1
 800431c:	4313      	orrs	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004320:	4b92      	ldr	r3, [pc, #584]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432e:	4a8f      	ldr	r2, [pc, #572]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004330:	430b      	orrs	r3, r1
 8004332:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004340:	643b      	str	r3, [r7, #64]	; 0x40
 8004342:	2300      	movs	r3, #0
 8004344:	647b      	str	r3, [r7, #68]	; 0x44
 8004346:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800434a:	460b      	mov	r3, r1
 800434c:	4313      	orrs	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004350:	4b86      	ldr	r3, [pc, #536]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	4a85      	ldr	r2, [pc, #532]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004356:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800435a:	6113      	str	r3, [r2, #16]
 800435c:	4b83      	ldr	r3, [pc, #524]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800435e:	6919      	ldr	r1, [r3, #16]
 8004360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004364:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004368:	4a80      	ldr	r2, [pc, #512]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800436a:	430b      	orrs	r3, r1
 800436c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800436e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800437a:	63bb      	str	r3, [r7, #56]	; 0x38
 800437c:	2300      	movs	r3, #0
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004380:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004384:	460b      	mov	r3, r1
 8004386:	4313      	orrs	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800438a:	4b78      	ldr	r3, [pc, #480]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	4a74      	ldr	r2, [pc, #464]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800439a:	430b      	orrs	r3, r1
 800439c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800439e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
 80043ac:	2300      	movs	r3, #0
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
 80043b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043ba:	4b6c      	ldr	r3, [pc, #432]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80043c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ca:	4a68      	ldr	r2, [pc, #416]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80043d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	2100      	movs	r1, #0
 80043da:	62b9      	str	r1, [r7, #40]	; 0x28
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80043e6:	460b      	mov	r3, r1
 80043e8:	4313      	orrs	r3, r2
 80043ea:	d011      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f0:	3308      	adds	r3, #8
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fb79 	bl	8004aec <RCCEx_PLL2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004400:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800440c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	2100      	movs	r1, #0
 800441a:	6239      	str	r1, [r7, #32]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
 8004422:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004426:	460b      	mov	r3, r1
 8004428:	4313      	orrs	r3, r2
 800442a:	d011      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800442c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004430:	3308      	adds	r3, #8
 8004432:	2101      	movs	r1, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fb59 	bl	8004aec <RCCEx_PLL2_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004440:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004448:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800444c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	2100      	movs	r1, #0
 800445a:	61b9      	str	r1, [r7, #24]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004466:	460b      	mov	r3, r1
 8004468:	4313      	orrs	r3, r2
 800446a:	d011      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800446c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004470:	3308      	adds	r3, #8
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fb39 	bl	8004aec <RCCEx_PLL2_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004480:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800448c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	2100      	movs	r1, #0
 800449a:	6139      	str	r1, [r7, #16]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044a6:	460b      	mov	r3, r1
 80044a8:	4313      	orrs	r3, r2
 80044aa:	d011      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b0:	3328      	adds	r3, #40	; 0x28
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fbcb 	bl	8004c50 <RCCEx_PLL3_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80044c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80044d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	2100      	movs	r1, #0
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80044e6:	460b      	mov	r3, r1
 80044e8:	4313      	orrs	r3, r2
 80044ea:	d011      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044f0:	3328      	adds	r3, #40	; 0x28
 80044f2:	2101      	movs	r1, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fbab 	bl	8004c50 <RCCEx_PLL3_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004500:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800450c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	2100      	movs	r1, #0
 800451a:	6039      	str	r1, [r7, #0]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d011      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800452c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004530:	3328      	adds	r3, #40	; 0x28
 8004532:	2102      	movs	r1, #2
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fb8b 	bl	8004c50 <RCCEx_PLL3_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004540:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800454c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004550:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
}
 800455e:	4618      	mov	r0, r3
 8004560:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004564:	46bd      	mov	sp, r7
 8004566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800456a:	bf00      	nop
 800456c:	58024400 	.word	0x58024400

08004570 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004574:	f7fe fde2 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4904      	ldr	r1, [pc, #16]	; (8004598 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	58024400 	.word	0x58024400
 8004598:	08008b2c 	.word	0x08008b2c

0800459c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045a4:	4ba1      	ldr	r3, [pc, #644]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80045ae:	4b9f      	ldr	r3, [pc, #636]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	0b1b      	lsrs	r3, r3, #12
 80045b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045ba:	4b9c      	ldr	r3, [pc, #624]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80045c6:	4b99      	ldr	r3, [pc, #612]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8111 	beq.w	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	f000 8083 	beq.w	80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f200 80a1 	bhi.w	800473c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d056      	beq.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004606:	e099      	b.n	800473c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004608:	4b88      	ldr	r3, [pc, #544]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02d      	beq.n	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004614:	4b85      	ldr	r3, [pc, #532]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	08db      	lsrs	r3, r3, #3
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	4a84      	ldr	r2, [pc, #528]	; (8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b7b      	ldr	r3, [pc, #492]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004652:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800466e:	e087      	b.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b6a      	ldr	r3, [pc, #424]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a03 	vldr	s12, [r7, #12]
 8004696:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046b2:	e065      	b.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800483c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b59      	ldr	r3, [pc, #356]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046f6:	e043      	b.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004840 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b48      	ldr	r3, [pc, #288]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	ed97 6a03 	vldr	s12, [r7, #12]
 800471e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800473a:	e021      	b.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800483c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b37      	ldr	r3, [pc, #220]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004762:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800477e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004780:	4b2a      	ldr	r3, [pc, #168]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	0a5b      	lsrs	r3, r3, #9
 8004786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800479a:	edd7 6a07 	vldr	s13, [r7, #28]
 800479e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a6:	ee17 2a90 	vmov	r2, s15
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80047ae:	4b1f      	ldr	r3, [pc, #124]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	0c1b      	lsrs	r3, r3, #16
 80047b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d4:	ee17 2a90 	vmov	r2, s15
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	0e1b      	lsrs	r3, r3, #24
 80047e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004802:	ee17 2a90 	vmov	r2, s15
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800480a:	e008      	b.n	800481e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	609a      	str	r2, [r3, #8]
}
 800481e:	bf00      	nop
 8004820:	3724      	adds	r7, #36	; 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	58024400 	.word	0x58024400
 8004830:	03d09000 	.word	0x03d09000
 8004834:	46000000 	.word	0x46000000
 8004838:	4c742400 	.word	0x4c742400
 800483c:	4a742400 	.word	0x4a742400
 8004840:	4af42400 	.word	0x4af42400

08004844 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004844:	b480      	push	{r7}
 8004846:	b089      	sub	sp, #36	; 0x24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800484c:	4ba1      	ldr	r3, [pc, #644]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004856:	4b9f      	ldr	r3, [pc, #636]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	0d1b      	lsrs	r3, r3, #20
 800485c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004860:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004862:	4b9c      	ldr	r3, [pc, #624]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800486e:	4b99      	ldr	r3, [pc, #612]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	08db      	lsrs	r3, r3, #3
 8004874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	fb02 f303 	mul.w	r3, r2, r3
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8111 	beq.w	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b02      	cmp	r3, #2
 8004896:	f000 8083 	beq.w	80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b02      	cmp	r3, #2
 800489e:	f200 80a1 	bhi.w	80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d056      	beq.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80048ae:	e099      	b.n	80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b0:	4b88      	ldr	r3, [pc, #544]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d02d      	beq.n	8004918 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048bc:	4b85      	ldr	r3, [pc, #532]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	08db      	lsrs	r3, r3, #3
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	4a84      	ldr	r2, [pc, #528]	; (8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
 80048cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b7b      	ldr	r3, [pc, #492]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004916:	e087      	b.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492a:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493a:	ed97 6a03 	vldr	s12, [r7, #12]
 800493e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800494e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800495a:	e065      	b.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800496a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496e:	4b59      	ldr	r3, [pc, #356]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004982:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800499e:	e043      	b.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80049ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b2:	4b48      	ldr	r3, [pc, #288]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049e2:	e021      	b.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f6:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004a28:	4b2a      	ldr	r3, [pc, #168]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	0a5b      	lsrs	r3, r3, #9
 8004a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4e:	ee17 2a90 	vmov	r2, s15
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a56:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a7c:	ee17 2a90 	vmov	r2, s15
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a84:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	0e1b      	lsrs	r3, r3, #24
 8004a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aaa:	ee17 2a90 	vmov	r2, s15
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	609a      	str	r2, [r3, #8]
}
 8004ac6:	bf00      	nop
 8004ac8:	3724      	adds	r7, #36	; 0x24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	58024400 	.word	0x58024400
 8004ad8:	03d09000 	.word	0x03d09000
 8004adc:	46000000 	.word	0x46000000
 8004ae0:	4c742400 	.word	0x4c742400
 8004ae4:	4a742400 	.word	0x4a742400
 8004ae8:	4af42400 	.word	0x4af42400

08004aec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004afa:	4b53      	ldr	r3, [pc, #332]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d101      	bne.n	8004b0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e099      	b.n	8004c3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b0a:	4b4f      	ldr	r3, [pc, #316]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a4e      	ldr	r2, [pc, #312]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b16:	f7fc fb25 	bl	8001164 <HAL_GetTick>
 8004b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b1e:	f7fc fb21 	bl	8001164 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e086      	b.n	8004c3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b30:	4b45      	ldr	r3, [pc, #276]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b3c:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	031b      	lsls	r3, r3, #12
 8004b4a:	493f      	ldr	r1, [pc, #252]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	628b      	str	r3, [r1, #40]	; 0x28
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	025b      	lsls	r3, r3, #9
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	041b      	lsls	r3, r3, #16
 8004b6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b80:	4931      	ldr	r1, [pc, #196]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b86:	4b30      	ldr	r3, [pc, #192]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	492d      	ldr	r1, [pc, #180]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b98:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	f023 0220 	bic.w	r2, r3, #32
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	4928      	ldr	r1, [pc, #160]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004baa:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bb0:	f023 0310 	bic.w	r3, r3, #16
 8004bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bba:	4b24      	ldr	r3, [pc, #144]	; (8004c4c <RCCEx_PLL2_Config+0x160>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	69d2      	ldr	r2, [r2, #28]
 8004bc2:	00d2      	lsls	r2, r2, #3
 8004bc4:	4920      	ldr	r1, [pc, #128]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004bca:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	f043 0310 	orr.w	r3, r3, #16
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004be8:	e00f      	b.n	8004c0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d106      	bne.n	8004bfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bf0:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bfc:	e005      	b.n	8004c0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004c10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c16:	f7fc faa5 	bl	8001164 <HAL_GetTick>
 8004c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c1c:	e008      	b.n	8004c30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c1e:	f7fc faa1 	bl	8001164 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e006      	b.n	8004c3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	ffff0007 	.word	0xffff0007

08004c50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c5e:	4b53      	ldr	r3, [pc, #332]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d101      	bne.n	8004c6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e099      	b.n	8004da2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c6e:	4b4f      	ldr	r3, [pc, #316]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a4e      	ldr	r2, [pc, #312]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7a:	f7fc fa73 	bl	8001164 <HAL_GetTick>
 8004c7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c80:	e008      	b.n	8004c94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c82:	f7fc fa6f 	bl	8001164 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e086      	b.n	8004da2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c94:	4b45      	ldr	r3, [pc, #276]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ca0:	4b42      	ldr	r3, [pc, #264]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	051b      	lsls	r3, r3, #20
 8004cae:	493f      	ldr	r1, [pc, #252]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	628b      	str	r3, [r1, #40]	; 0x28
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	025b      	lsls	r3, r3, #9
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ce4:	4931      	ldr	r1, [pc, #196]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cea:	4b30      	ldr	r3, [pc, #192]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	492d      	ldr	r1, [pc, #180]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	4928      	ldr	r1, [pc, #160]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d0e:	4b27      	ldr	r3, [pc, #156]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	4a26      	ldr	r2, [pc, #152]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d1a:	4b24      	ldr	r3, [pc, #144]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1e:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <RCCEx_PLL3_Config+0x160>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	69d2      	ldr	r2, [r2, #28]
 8004d26:	00d2      	lsls	r2, r2, #3
 8004d28:	4920      	ldr	r1, [pc, #128]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d2e:	4b1f      	ldr	r3, [pc, #124]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4a1e      	ldr	r2, [pc, #120]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	4a19      	ldr	r2, [pc, #100]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d4c:	e00f      	b.n	8004d6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d106      	bne.n	8004d62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d54:	4b15      	ldr	r3, [pc, #84]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d60:	e005      	b.n	8004d6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	4a11      	ldr	r2, [pc, #68]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a0e      	ldr	r2, [pc, #56]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7a:	f7fc f9f3 	bl	8001164 <HAL_GetTick>
 8004d7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d80:	e008      	b.n	8004d94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d82:	f7fc f9ef 	bl	8001164 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e006      	b.n	8004da2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	58024400 	.word	0x58024400
 8004db0:	ffff0007 	.word	0xffff0007

08004db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e049      	b.n	8004e5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fb ff5a 	bl	8000c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 fbb0 	bl	8005558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e049      	b.n	8004f08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f841 	bl	8004f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f000 fb59 	bl	8005558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <HAL_TIM_PWM_Start+0x24>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	e03c      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x9e>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d109      	bne.n	8004f62 <HAL_TIM_PWM_Start+0x3e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	bf14      	ite	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	2300      	moveq	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	e02f      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x9e>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d109      	bne.n	8004f7c <HAL_TIM_PWM_Start+0x58>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e022      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x9e>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d109      	bne.n	8004f96 <HAL_TIM_PWM_Start+0x72>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	bf14      	ite	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	2300      	moveq	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	e015      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x9e>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d109      	bne.n	8004fb0 <HAL_TIM_PWM_Start+0x8c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e008      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x9e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0a1      	b.n	800510e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start+0xb6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd8:	e023      	b.n	8005022 <HAL_TIM_PWM_Start+0xfe>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start+0xc6>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe8:	e01b      	b.n	8005022 <HAL_TIM_PWM_Start+0xfe>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0xd6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff8:	e013      	b.n	8005022 <HAL_TIM_PWM_Start+0xfe>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b0c      	cmp	r3, #12
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0xe6>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005008:	e00b      	b.n	8005022 <HAL_TIM_PWM_Start+0xfe>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b10      	cmp	r3, #16
 800500e:	d104      	bne.n	800501a <HAL_TIM_PWM_Start+0xf6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005018:	e003      	b.n	8005022 <HAL_TIM_PWM_Start+0xfe>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2201      	movs	r2, #1
 8005028:	6839      	ldr	r1, [r7, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 feae 	bl	8005d8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a38      	ldr	r2, [pc, #224]	; (8005118 <HAL_TIM_PWM_Start+0x1f4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <HAL_TIM_PWM_Start+0x13e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a37      	ldr	r2, [pc, #220]	; (800511c <HAL_TIM_PWM_Start+0x1f8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00e      	beq.n	8005062 <HAL_TIM_PWM_Start+0x13e>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a35      	ldr	r2, [pc, #212]	; (8005120 <HAL_TIM_PWM_Start+0x1fc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_TIM_PWM_Start+0x13e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a34      	ldr	r2, [pc, #208]	; (8005124 <HAL_TIM_PWM_Start+0x200>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_TIM_PWM_Start+0x13e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a32      	ldr	r2, [pc, #200]	; (8005128 <HAL_TIM_PWM_Start+0x204>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d101      	bne.n	8005066 <HAL_TIM_PWM_Start+0x142>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <HAL_TIM_PWM_Start+0x144>
 8005066:	2300      	movs	r3, #0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800507a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a25      	ldr	r2, [pc, #148]	; (8005118 <HAL_TIM_PWM_Start+0x1f4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d022      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1a8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d01d      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1a8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a25      	ldr	r2, [pc, #148]	; (800512c <HAL_TIM_PWM_Start+0x208>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d018      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1a8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a24      	ldr	r2, [pc, #144]	; (8005130 <HAL_TIM_PWM_Start+0x20c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1a8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a22      	ldr	r2, [pc, #136]	; (8005134 <HAL_TIM_PWM_Start+0x210>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00e      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1a8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1a      	ldr	r2, [pc, #104]	; (800511c <HAL_TIM_PWM_Start+0x1f8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1a8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1e      	ldr	r2, [pc, #120]	; (8005138 <HAL_TIM_PWM_Start+0x214>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_TIM_PWM_Start+0x1a8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a16      	ldr	r2, [pc, #88]	; (8005120 <HAL_TIM_PWM_Start+0x1fc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d115      	bne.n	80050f8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	4b1a      	ldr	r3, [pc, #104]	; (800513c <HAL_TIM_PWM_Start+0x218>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b06      	cmp	r3, #6
 80050dc:	d015      	beq.n	800510a <HAL_TIM_PWM_Start+0x1e6>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e4:	d011      	beq.n	800510a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f6:	e008      	b.n	800510a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e000      	b.n	800510c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000
 800511c:	40010400 	.word	0x40010400
 8005120:	40014000 	.word	0x40014000
 8005124:	40014400 	.word	0x40014400
 8005128:	40014800 	.word	0x40014800
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40001800 	.word	0x40001800
 800513c:	00010007 	.word	0x00010007

08005140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800515a:	2302      	movs	r3, #2
 800515c:	e0ff      	b.n	800535e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b14      	cmp	r3, #20
 800516a:	f200 80f0 	bhi.w	800534e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	080051c9 	.word	0x080051c9
 8005178:	0800534f 	.word	0x0800534f
 800517c:	0800534f 	.word	0x0800534f
 8005180:	0800534f 	.word	0x0800534f
 8005184:	08005209 	.word	0x08005209
 8005188:	0800534f 	.word	0x0800534f
 800518c:	0800534f 	.word	0x0800534f
 8005190:	0800534f 	.word	0x0800534f
 8005194:	0800524b 	.word	0x0800524b
 8005198:	0800534f 	.word	0x0800534f
 800519c:	0800534f 	.word	0x0800534f
 80051a0:	0800534f 	.word	0x0800534f
 80051a4:	0800528b 	.word	0x0800528b
 80051a8:	0800534f 	.word	0x0800534f
 80051ac:	0800534f 	.word	0x0800534f
 80051b0:	0800534f 	.word	0x0800534f
 80051b4:	080052cd 	.word	0x080052cd
 80051b8:	0800534f 	.word	0x0800534f
 80051bc:	0800534f 	.word	0x0800534f
 80051c0:	0800534f 	.word	0x0800534f
 80051c4:	0800530d 	.word	0x0800530d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fa68 	bl	80056a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0208 	orr.w	r2, r2, #8
 80051e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0204 	bic.w	r2, r2, #4
 80051f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6999      	ldr	r1, [r3, #24]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	619a      	str	r2, [r3, #24]
      break;
 8005206:	e0a5      	b.n	8005354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fad8 	bl	80057c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6999      	ldr	r1, [r3, #24]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	021a      	lsls	r2, r3, #8
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	619a      	str	r2, [r3, #24]
      break;
 8005248:	e084      	b.n	8005354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fb41 	bl	80058d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0208 	orr.w	r2, r2, #8
 8005264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0204 	bic.w	r2, r2, #4
 8005274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69d9      	ldr	r1, [r3, #28]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	61da      	str	r2, [r3, #28]
      break;
 8005288:	e064      	b.n	8005354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fba9 	bl	80059e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69d9      	ldr	r1, [r3, #28]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	021a      	lsls	r2, r3, #8
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	61da      	str	r2, [r3, #28]
      break;
 80052ca:	e043      	b.n	8005354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fbf2 	bl	8005abc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0208 	orr.w	r2, r2, #8
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0204 	bic.w	r2, r2, #4
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800530a:	e023      	b.n	8005354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fc36 	bl	8005b84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	021a      	lsls	r2, r3, #8
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800534c:	e002      	b.n	8005354 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	75fb      	strb	r3, [r7, #23]
      break;
 8005352:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop

08005368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIM_ConfigClockSource+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e0dc      	b.n	800553e <HAL_TIM_ConfigClockSource+0x1d6>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	4b6a      	ldr	r3, [pc, #424]	; (8005548 <HAL_TIM_ConfigClockSource+0x1e0>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a64      	ldr	r2, [pc, #400]	; (800554c <HAL_TIM_ConfigClockSource+0x1e4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	f000 80a9 	beq.w	8005512 <HAL_TIM_ConfigClockSource+0x1aa>
 80053c0:	4a62      	ldr	r2, [pc, #392]	; (800554c <HAL_TIM_ConfigClockSource+0x1e4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	f200 80ae 	bhi.w	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 80053c8:	4a61      	ldr	r2, [pc, #388]	; (8005550 <HAL_TIM_ConfigClockSource+0x1e8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	f000 80a1 	beq.w	8005512 <HAL_TIM_ConfigClockSource+0x1aa>
 80053d0:	4a5f      	ldr	r2, [pc, #380]	; (8005550 <HAL_TIM_ConfigClockSource+0x1e8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	f200 80a6 	bhi.w	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 80053d8:	4a5e      	ldr	r2, [pc, #376]	; (8005554 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	f000 8099 	beq.w	8005512 <HAL_TIM_ConfigClockSource+0x1aa>
 80053e0:	4a5c      	ldr	r2, [pc, #368]	; (8005554 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	f200 809e 	bhi.w	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 80053e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053ec:	f000 8091 	beq.w	8005512 <HAL_TIM_ConfigClockSource+0x1aa>
 80053f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053f4:	f200 8096 	bhi.w	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 80053f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053fc:	f000 8089 	beq.w	8005512 <HAL_TIM_ConfigClockSource+0x1aa>
 8005400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005404:	f200 808e 	bhi.w	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 8005408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800540c:	d03e      	beq.n	800548c <HAL_TIM_ConfigClockSource+0x124>
 800540e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005412:	f200 8087 	bhi.w	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 8005416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541a:	f000 8086 	beq.w	800552a <HAL_TIM_ConfigClockSource+0x1c2>
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	d87f      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 8005424:	2b70      	cmp	r3, #112	; 0x70
 8005426:	d01a      	beq.n	800545e <HAL_TIM_ConfigClockSource+0xf6>
 8005428:	2b70      	cmp	r3, #112	; 0x70
 800542a:	d87b      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 800542c:	2b60      	cmp	r3, #96	; 0x60
 800542e:	d050      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x16a>
 8005430:	2b60      	cmp	r3, #96	; 0x60
 8005432:	d877      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 8005434:	2b50      	cmp	r3, #80	; 0x50
 8005436:	d03c      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x14a>
 8005438:	2b50      	cmp	r3, #80	; 0x50
 800543a:	d873      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	d058      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x18a>
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d86f      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 8005444:	2b30      	cmp	r3, #48	; 0x30
 8005446:	d064      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x1aa>
 8005448:	2b30      	cmp	r3, #48	; 0x30
 800544a:	d86b      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 800544c:	2b20      	cmp	r3, #32
 800544e:	d060      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x1aa>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d867      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d05c      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x1aa>
 8005458:	2b10      	cmp	r3, #16
 800545a:	d05a      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x1aa>
 800545c:	e062      	b.n	8005524 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800546e:	f000 fc6d 	bl	8005d4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	609a      	str	r2, [r3, #8]
      break;
 800548a:	e04f      	b.n	800552c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800549c:	f000 fc56 	bl	8005d4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ae:	609a      	str	r2, [r3, #8]
      break;
 80054b0:	e03c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054be:	461a      	mov	r2, r3
 80054c0:	f000 fbc6 	bl	8005c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2150      	movs	r1, #80	; 0x50
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fc20 	bl	8005d10 <TIM_ITRx_SetConfig>
      break;
 80054d0:	e02c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054de:	461a      	mov	r2, r3
 80054e0:	f000 fbe5 	bl	8005cae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2160      	movs	r1, #96	; 0x60
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fc10 	bl	8005d10 <TIM_ITRx_SetConfig>
      break;
 80054f0:	e01c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054fe:	461a      	mov	r2, r3
 8005500:	f000 fba6 	bl	8005c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2140      	movs	r1, #64	; 0x40
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fc00 	bl	8005d10 <TIM_ITRx_SetConfig>
      break;
 8005510:	e00c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4619      	mov	r1, r3
 800551c:	4610      	mov	r0, r2
 800551e:	f000 fbf7 	bl	8005d10 <TIM_ITRx_SetConfig>
      break;
 8005522:	e003      	b.n	800552c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      break;
 8005528:	e000      	b.n	800552c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800552a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	ffceff88 	.word	0xffceff88
 800554c:	00100040 	.word	0x00100040
 8005550:	00100030 	.word	0x00100030
 8005554:	00100020 	.word	0x00100020

08005558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a46      	ldr	r2, [pc, #280]	; (8005684 <TIM_Base_SetConfig+0x12c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d013      	beq.n	8005598 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005576:	d00f      	beq.n	8005598 <TIM_Base_SetConfig+0x40>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a43      	ldr	r2, [pc, #268]	; (8005688 <TIM_Base_SetConfig+0x130>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00b      	beq.n	8005598 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a42      	ldr	r2, [pc, #264]	; (800568c <TIM_Base_SetConfig+0x134>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d007      	beq.n	8005598 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a41      	ldr	r2, [pc, #260]	; (8005690 <TIM_Base_SetConfig+0x138>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_Base_SetConfig+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a40      	ldr	r2, [pc, #256]	; (8005694 <TIM_Base_SetConfig+0x13c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d108      	bne.n	80055aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a35      	ldr	r2, [pc, #212]	; (8005684 <TIM_Base_SetConfig+0x12c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01f      	beq.n	80055f2 <TIM_Base_SetConfig+0x9a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b8:	d01b      	beq.n	80055f2 <TIM_Base_SetConfig+0x9a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a32      	ldr	r2, [pc, #200]	; (8005688 <TIM_Base_SetConfig+0x130>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d017      	beq.n	80055f2 <TIM_Base_SetConfig+0x9a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a31      	ldr	r2, [pc, #196]	; (800568c <TIM_Base_SetConfig+0x134>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <TIM_Base_SetConfig+0x9a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a30      	ldr	r2, [pc, #192]	; (8005690 <TIM_Base_SetConfig+0x138>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00f      	beq.n	80055f2 <TIM_Base_SetConfig+0x9a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2f      	ldr	r2, [pc, #188]	; (8005694 <TIM_Base_SetConfig+0x13c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <TIM_Base_SetConfig+0x9a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2e      	ldr	r2, [pc, #184]	; (8005698 <TIM_Base_SetConfig+0x140>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <TIM_Base_SetConfig+0x9a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2d      	ldr	r2, [pc, #180]	; (800569c <TIM_Base_SetConfig+0x144>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_Base_SetConfig+0x9a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2c      	ldr	r2, [pc, #176]	; (80056a0 <TIM_Base_SetConfig+0x148>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d108      	bne.n	8005604 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a16      	ldr	r2, [pc, #88]	; (8005684 <TIM_Base_SetConfig+0x12c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_Base_SetConfig+0xf8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a18      	ldr	r2, [pc, #96]	; (8005694 <TIM_Base_SetConfig+0x13c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_Base_SetConfig+0xf8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a17      	ldr	r2, [pc, #92]	; (8005698 <TIM_Base_SetConfig+0x140>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_Base_SetConfig+0xf8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a16      	ldr	r2, [pc, #88]	; (800569c <TIM_Base_SetConfig+0x144>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_Base_SetConfig+0xf8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <TIM_Base_SetConfig+0x148>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d103      	bne.n	8005658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b01      	cmp	r3, #1
 8005668:	d105      	bne.n	8005676 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f023 0201 	bic.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	611a      	str	r2, [r3, #16]
  }
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40010000 	.word	0x40010000
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40010400 	.word	0x40010400
 8005698:	40014000 	.word	0x40014000
 800569c:	40014400 	.word	0x40014400
 80056a0:	40014800 	.word	0x40014800

080056a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f023 0201 	bic.w	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4b37      	ldr	r3, [pc, #220]	; (80057ac <TIM_OC1_SetConfig+0x108>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 0302 	bic.w	r3, r3, #2
 80056ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a2d      	ldr	r2, [pc, #180]	; (80057b0 <TIM_OC1_SetConfig+0x10c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_OC1_SetConfig+0x7c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a2c      	ldr	r2, [pc, #176]	; (80057b4 <TIM_OC1_SetConfig+0x110>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00b      	beq.n	8005720 <TIM_OC1_SetConfig+0x7c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a2b      	ldr	r2, [pc, #172]	; (80057b8 <TIM_OC1_SetConfig+0x114>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_OC1_SetConfig+0x7c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a2a      	ldr	r2, [pc, #168]	; (80057bc <TIM_OC1_SetConfig+0x118>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_OC1_SetConfig+0x7c>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <TIM_OC1_SetConfig+0x11c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d10c      	bne.n	800573a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f023 0308 	bic.w	r3, r3, #8
 8005726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f023 0304 	bic.w	r3, r3, #4
 8005738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <TIM_OC1_SetConfig+0x10c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00f      	beq.n	8005762 <TIM_OC1_SetConfig+0xbe>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1b      	ldr	r2, [pc, #108]	; (80057b4 <TIM_OC1_SetConfig+0x110>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00b      	beq.n	8005762 <TIM_OC1_SetConfig+0xbe>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1a      	ldr	r2, [pc, #104]	; (80057b8 <TIM_OC1_SetConfig+0x114>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d007      	beq.n	8005762 <TIM_OC1_SetConfig+0xbe>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a19      	ldr	r2, [pc, #100]	; (80057bc <TIM_OC1_SetConfig+0x118>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_OC1_SetConfig+0xbe>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <TIM_OC1_SetConfig+0x11c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d111      	bne.n	8005786 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	fffeff8f 	.word	0xfffeff8f
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40010400 	.word	0x40010400
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40014400 	.word	0x40014400
 80057c0:	40014800 	.word	0x40014800

080057c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	f023 0210 	bic.w	r2, r3, #16
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4b34      	ldr	r3, [pc, #208]	; (80058c0 <TIM_OC2_SetConfig+0xfc>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f023 0320 	bic.w	r3, r3, #32
 800580e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a29      	ldr	r2, [pc, #164]	; (80058c4 <TIM_OC2_SetConfig+0x100>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_OC2_SetConfig+0x68>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a28      	ldr	r2, [pc, #160]	; (80058c8 <TIM_OC2_SetConfig+0x104>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d10d      	bne.n	8005848 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005846:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <TIM_OC2_SetConfig+0x100>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00f      	beq.n	8005870 <TIM_OC2_SetConfig+0xac>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <TIM_OC2_SetConfig+0x104>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_OC2_SetConfig+0xac>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a1c      	ldr	r2, [pc, #112]	; (80058cc <TIM_OC2_SetConfig+0x108>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <TIM_OC2_SetConfig+0xac>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <TIM_OC2_SetConfig+0x10c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_OC2_SetConfig+0xac>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a1a      	ldr	r2, [pc, #104]	; (80058d4 <TIM_OC2_SetConfig+0x110>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d113      	bne.n	8005898 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800587e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	621a      	str	r2, [r3, #32]
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	feff8fff 	.word	0xfeff8fff
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40010400 	.word	0x40010400
 80058cc:	40014000 	.word	0x40014000
 80058d0:	40014400 	.word	0x40014400
 80058d4:	40014800 	.word	0x40014800

080058d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4b33      	ldr	r3, [pc, #204]	; (80059d0 <TIM_OC3_SetConfig+0xf8>)
 8005904:	4013      	ands	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a28      	ldr	r2, [pc, #160]	; (80059d4 <TIM_OC3_SetConfig+0xfc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_OC3_SetConfig+0x66>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a27      	ldr	r2, [pc, #156]	; (80059d8 <TIM_OC3_SetConfig+0x100>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10d      	bne.n	800595a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <TIM_OC3_SetConfig+0xfc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00f      	beq.n	8005982 <TIM_OC3_SetConfig+0xaa>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a1c      	ldr	r2, [pc, #112]	; (80059d8 <TIM_OC3_SetConfig+0x100>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00b      	beq.n	8005982 <TIM_OC3_SetConfig+0xaa>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a1b      	ldr	r2, [pc, #108]	; (80059dc <TIM_OC3_SetConfig+0x104>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <TIM_OC3_SetConfig+0xaa>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a1a      	ldr	r2, [pc, #104]	; (80059e0 <TIM_OC3_SetConfig+0x108>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_OC3_SetConfig+0xaa>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <TIM_OC3_SetConfig+0x10c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d113      	bne.n	80059aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	621a      	str	r2, [r3, #32]
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	fffeff8f 	.word	0xfffeff8f
 80059d4:	40010000 	.word	0x40010000
 80059d8:	40010400 	.word	0x40010400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4b24      	ldr	r3, [pc, #144]	; (8005aa4 <TIM_OC4_SetConfig+0xbc>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	031b      	lsls	r3, r3, #12
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <TIM_OC4_SetConfig+0xc0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00f      	beq.n	8005a68 <TIM_OC4_SetConfig+0x80>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a18      	ldr	r2, [pc, #96]	; (8005aac <TIM_OC4_SetConfig+0xc4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00b      	beq.n	8005a68 <TIM_OC4_SetConfig+0x80>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a17      	ldr	r2, [pc, #92]	; (8005ab0 <TIM_OC4_SetConfig+0xc8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d007      	beq.n	8005a68 <TIM_OC4_SetConfig+0x80>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a16      	ldr	r2, [pc, #88]	; (8005ab4 <TIM_OC4_SetConfig+0xcc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_OC4_SetConfig+0x80>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <TIM_OC4_SetConfig+0xd0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d109      	bne.n	8005a7c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	019b      	lsls	r3, r3, #6
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	feff8fff 	.word	0xfeff8fff
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40010400 	.word	0x40010400
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40014400 	.word	0x40014400
 8005ab8:	40014800 	.word	0x40014800

08005abc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <TIM_OC5_SetConfig+0xb0>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005afc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	041b      	lsls	r3, r3, #16
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <TIM_OC5_SetConfig+0xb4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00f      	beq.n	8005b32 <TIM_OC5_SetConfig+0x76>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a17      	ldr	r2, [pc, #92]	; (8005b74 <TIM_OC5_SetConfig+0xb8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <TIM_OC5_SetConfig+0x76>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <TIM_OC5_SetConfig+0xbc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_OC5_SetConfig+0x76>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <TIM_OC5_SetConfig+0xc0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_OC5_SetConfig+0x76>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a14      	ldr	r2, [pc, #80]	; (8005b80 <TIM_OC5_SetConfig+0xc4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d109      	bne.n	8005b46 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	621a      	str	r2, [r3, #32]
}
 8005b60:	bf00      	nop
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	fffeff8f 	.word	0xfffeff8f
 8005b70:	40010000 	.word	0x40010000
 8005b74:	40010400 	.word	0x40010400
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40014400 	.word	0x40014400
 8005b80:	40014800 	.word	0x40014800

08005b84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <TIM_OC6_SetConfig+0xb4>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	051b      	lsls	r3, r3, #20
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <TIM_OC6_SetConfig+0xb8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00f      	beq.n	8005bfc <TIM_OC6_SetConfig+0x78>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <TIM_OC6_SetConfig+0xbc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_OC6_SetConfig+0x78>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <TIM_OC6_SetConfig+0xc0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_OC6_SetConfig+0x78>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <TIM_OC6_SetConfig+0xc4>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_OC6_SetConfig+0x78>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <TIM_OC6_SetConfig+0xc8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d109      	bne.n	8005c10 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	feff8fff 	.word	0xfeff8fff
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40010400 	.word	0x40010400
 8005c44:	40014000 	.word	0x40014000
 8005c48:	40014400 	.word	0x40014400
 8005c4c:	40014800 	.word	0x40014800

08005c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f023 0201 	bic.w	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f023 030a 	bic.w	r3, r3, #10
 8005c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b087      	sub	sp, #28
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f023 0210 	bic.w	r2, r3, #16
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	031b      	lsls	r3, r3, #12
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <TIM_ITRx_SetConfig+0x38>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f043 0307 	orr.w	r3, r3, #7
 8005d32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	609a      	str	r2, [r3, #8]
}
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	ffcfff8f 	.word	0xffcfff8f

08005d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	021a      	lsls	r2, r3, #8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	609a      	str	r2, [r3, #8]
}
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2201      	movs	r2, #1
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1a      	ldr	r2, [r3, #32]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	401a      	ands	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a1a      	ldr	r2, [r3, #32]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
	...

08005dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e06d      	b.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d108      	bne.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a20      	ldr	r2, [pc, #128]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d01d      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1c      	ldr	r2, [pc, #112]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a15      	ldr	r2, [pc, #84]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a16      	ldr	r2, [pc, #88]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10c      	bne.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40010400 	.word	0x40010400
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40001800 	.word	0x40001800
 8005ef0:	40014000 	.word	0x40014000

08005ef4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e073      	b.n	8005ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	041b      	lsls	r3, r3, #16
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a19      	ldr	r2, [pc, #100]	; (8006004 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a18      	ldr	r2, [pc, #96]	; (8006008 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d11c      	bne.n	8005fe6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb6:	051b      	lsls	r3, r3, #20
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	40010000 	.word	0x40010000
 8006008:	40010400 	.word	0x40010400

0800600c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e042      	b.n	80060a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fa fec9 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2224      	movs	r2, #36	; 0x24
 800603a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 fac4 	bl	80075e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fc55 	bl	800690c <UART_SetConfig>
 8006062:	4603      	mov	r3, r0
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e01b      	b.n	80060a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800607a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800608a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fb43 	bl	8007728 <UART_CheckIdleState>
 80060a2:	4603      	mov	r3, r0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	; 0x28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d137      	bne.n	8006134 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_UART_Receive_IT+0x24>
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e030      	b.n	8006136 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a18      	ldr	r2, [pc, #96]	; (8006140 <HAL_UART_Receive_IT+0x94>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d01f      	beq.n	8006124 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d018      	beq.n	8006124 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	623b      	str	r3, [r7, #32]
 8006112:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	69f9      	ldr	r1, [r7, #28]
 8006116:	6a3a      	ldr	r2, [r7, #32]
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	61bb      	str	r3, [r7, #24]
   return(result);
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e6      	bne.n	80060f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	461a      	mov	r2, r3
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f001 fc14 	bl	8007958 <UART_Start_Receive_IT>
 8006130:	4603      	mov	r3, r0
 8006132:	e000      	b.n	8006136 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006134:	2302      	movs	r3, #2
  }
}
 8006136:	4618      	mov	r0, r3
 8006138:	3728      	adds	r7, #40	; 0x28
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	58000c00 	.word	0x58000c00

08006144 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b0ba      	sub	sp, #232	; 0xe8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800616a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800616e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006172:	4013      	ands	r3, r2
 8006174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800617c:	2b00      	cmp	r3, #0
 800617e:	d11b      	bne.n	80061b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d015      	beq.n	80061b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800618c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8377 	beq.w	800689c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
      }
      return;
 80061b6:	e371      	b.n	800689c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8123 	beq.w	8006408 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80061c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80061c6:	4b8d      	ldr	r3, [pc, #564]	; (80063fc <HAL_UART_IRQHandler+0x2b8>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061d2:	4b8b      	ldr	r3, [pc, #556]	; (8006400 <HAL_UART_IRQHandler+0x2bc>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 8116 	beq.w	8006408 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d011      	beq.n	800620c <HAL_UART_IRQHandler+0xc8>
 80061e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00b      	beq.n	800620c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2201      	movs	r2, #1
 80061fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006202:	f043 0201 	orr.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800620c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d011      	beq.n	800623c <HAL_UART_IRQHandler+0xf8>
 8006218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2202      	movs	r2, #2
 800622a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f043 0204 	orr.w	r2, r3, #4
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800623c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d011      	beq.n	800626c <HAL_UART_IRQHandler+0x128>
 8006248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2204      	movs	r2, #4
 800625a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f043 0202 	orr.w	r2, r3, #2
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800626c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d017      	beq.n	80062a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	d105      	bne.n	8006290 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006284:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006288:	4b5c      	ldr	r3, [pc, #368]	; (80063fc <HAL_UART_IRQHandler+0x2b8>)
 800628a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2208      	movs	r2, #8
 8006296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629e:	f043 0208 	orr.w	r2, r3, #8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d012      	beq.n	80062da <HAL_UART_IRQHandler+0x196>
 80062b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00c      	beq.n	80062da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d0:	f043 0220 	orr.w	r2, r3, #32
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 82dd 	beq.w	80068a0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d013      	beq.n	800631a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d105      	bne.n	800630a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d005      	beq.n	800633e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006336:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800633a:	2b00      	cmp	r3, #0
 800633c:	d054      	beq.n	80063e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fc2c 	bl	8007b9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d146      	bne.n	80063e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3308      	adds	r3, #8
 8006358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800637e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800638a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1d9      	bne.n	8006352 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d017      	beq.n	80063d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ae:	4a15      	ldr	r2, [pc, #84]	; (8006404 <HAL_UART_IRQHandler+0x2c0>)
 80063b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fb fb0d 	bl	80019d8 <HAL_DMA_Abort_IT>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d019      	beq.n	80063f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80063d2:	4610      	mov	r0, r2
 80063d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d6:	e00f      	b.n	80063f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fa81 	bl	80068e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063de:	e00b      	b.n	80063f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fa7d 	bl	80068e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e6:	e007      	b.n	80063f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa79 	bl	80068e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80063f6:	e253      	b.n	80068a0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f8:	bf00      	nop
    return;
 80063fa:	e251      	b.n	80068a0 <HAL_UART_IRQHandler+0x75c>
 80063fc:	10000001 	.word	0x10000001
 8006400:	04000120 	.word	0x04000120
 8006404:	08007c69 	.word	0x08007c69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640c:	2b01      	cmp	r3, #1
 800640e:	f040 81e7 	bne.w	80067e0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 81e0 	beq.w	80067e0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 81d9 	beq.w	80067e0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2210      	movs	r2, #16
 8006434:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b40      	cmp	r3, #64	; 0x40
 8006442:	f040 8151 	bne.w	80066e8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a96      	ldr	r2, [pc, #600]	; (80066a8 <HAL_UART_IRQHandler+0x564>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d068      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a93      	ldr	r2, [pc, #588]	; (80066ac <HAL_UART_IRQHandler+0x568>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d061      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a91      	ldr	r2, [pc, #580]	; (80066b0 <HAL_UART_IRQHandler+0x56c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d05a      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a8e      	ldr	r2, [pc, #568]	; (80066b4 <HAL_UART_IRQHandler+0x570>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d053      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a8c      	ldr	r2, [pc, #560]	; (80066b8 <HAL_UART_IRQHandler+0x574>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d04c      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a89      	ldr	r2, [pc, #548]	; (80066bc <HAL_UART_IRQHandler+0x578>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d045      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a87      	ldr	r2, [pc, #540]	; (80066c0 <HAL_UART_IRQHandler+0x57c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d03e      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a84      	ldr	r2, [pc, #528]	; (80066c4 <HAL_UART_IRQHandler+0x580>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d037      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a82      	ldr	r2, [pc, #520]	; (80066c8 <HAL_UART_IRQHandler+0x584>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d030      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a7f      	ldr	r2, [pc, #508]	; (80066cc <HAL_UART_IRQHandler+0x588>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d029      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a7d      	ldr	r2, [pc, #500]	; (80066d0 <HAL_UART_IRQHandler+0x58c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a7a      	ldr	r2, [pc, #488]	; (80066d4 <HAL_UART_IRQHandler+0x590>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01b      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a78      	ldr	r2, [pc, #480]	; (80066d8 <HAL_UART_IRQHandler+0x594>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d014      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a75      	ldr	r2, [pc, #468]	; (80066dc <HAL_UART_IRQHandler+0x598>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00d      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a73      	ldr	r2, [pc, #460]	; (80066e0 <HAL_UART_IRQHandler+0x59c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d006      	beq.n	8006526 <HAL_UART_IRQHandler+0x3e2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a70      	ldr	r2, [pc, #448]	; (80066e4 <HAL_UART_IRQHandler+0x5a0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d106      	bne.n	8006534 <HAL_UART_IRQHandler+0x3f0>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	b29b      	uxth	r3, r3
 8006532:	e005      	b.n	8006540 <HAL_UART_IRQHandler+0x3fc>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 81ab 	beq.w	80068a4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006554:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006558:	429a      	cmp	r2, r3
 800655a:	f080 81a3 	bcs.w	80068a4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006574:	f000 8087 	beq.w	8006686 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800658c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1da      	bne.n	8006578 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3308      	adds	r3, #8
 80065c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3308      	adds	r3, #8
 80065e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e1      	bne.n	80065c2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3308      	adds	r3, #8
 8006604:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800660e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006622:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006624:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006628:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e3      	bne.n	80065fe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006654:	f023 0310 	bic.w	r3, r3, #16
 8006658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006666:	65bb      	str	r3, [r7, #88]	; 0x58
 8006668:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800666c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e4      	bne.n	8006644 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006680:	4618      	mov	r0, r3
 8006682:	f7fa fe8b 	bl	800139c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006698:	b29b      	uxth	r3, r3
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	b29b      	uxth	r3, r3
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f927 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066a6:	e0fd      	b.n	80068a4 <HAL_UART_IRQHandler+0x760>
 80066a8:	40020010 	.word	0x40020010
 80066ac:	40020028 	.word	0x40020028
 80066b0:	40020040 	.word	0x40020040
 80066b4:	40020058 	.word	0x40020058
 80066b8:	40020070 	.word	0x40020070
 80066bc:	40020088 	.word	0x40020088
 80066c0:	400200a0 	.word	0x400200a0
 80066c4:	400200b8 	.word	0x400200b8
 80066c8:	40020410 	.word	0x40020410
 80066cc:	40020428 	.word	0x40020428
 80066d0:	40020440 	.word	0x40020440
 80066d4:	40020458 	.word	0x40020458
 80066d8:	40020470 	.word	0x40020470
 80066dc:	40020488 	.word	0x40020488
 80066e0:	400204a0 	.word	0x400204a0
 80066e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 80cf 	beq.w	80068a8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800670a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 80ca 	beq.w	80068a8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006728:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006736:	647b      	str	r3, [r7, #68]	; 0x44
 8006738:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800673c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e4      	bne.n	8006714 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3308      	adds	r3, #8
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	623b      	str	r3, [r7, #32]
   return(result);
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	4b55      	ldr	r3, [pc, #340]	; (80068b4 <HAL_UART_IRQHandler+0x770>)
 800675e:	4013      	ands	r3, r2
 8006760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3308      	adds	r3, #8
 800676a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800676e:	633a      	str	r2, [r7, #48]	; 0x30
 8006770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e3      	bne.n	800674a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0310 	bic.w	r3, r3, #16
 80067aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	69b9      	ldr	r1, [r7, #24]
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	617b      	str	r3, [r7, #20]
   return(result);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e4      	bne.n	8006796 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f88b 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067de:	e063      	b.n	80068a8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00e      	beq.n	800680a <HAL_UART_IRQHandler+0x6c6>
 80067ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006800:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 ff8e 	bl	8008724 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006808:	e051      	b.n	80068ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006812:	2b00      	cmp	r3, #0
 8006814:	d014      	beq.n	8006840 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d008      	beq.n	8006840 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006832:	2b00      	cmp	r3, #0
 8006834:	d03a      	beq.n	80068ac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
    }
    return;
 800683e:	e035      	b.n	80068ac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006848:	2b00      	cmp	r3, #0
 800684a:	d009      	beq.n	8006860 <HAL_UART_IRQHandler+0x71c>
 800684c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 fa1b 	bl	8007c94 <UART_EndTransmit_IT>
    return;
 800685e:	e026      	b.n	80068ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d009      	beq.n	8006880 <HAL_UART_IRQHandler+0x73c>
 800686c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006870:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 ff67 	bl	800874c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800687e:	e016      	b.n	80068ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d010      	beq.n	80068ae <HAL_UART_IRQHandler+0x76a>
 800688c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006890:	2b00      	cmp	r3, #0
 8006892:	da0c      	bge.n	80068ae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 ff4f 	bl	8008738 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800689a:	e008      	b.n	80068ae <HAL_UART_IRQHandler+0x76a>
      return;
 800689c:	bf00      	nop
 800689e:	e006      	b.n	80068ae <HAL_UART_IRQHandler+0x76a>
    return;
 80068a0:	bf00      	nop
 80068a2:	e004      	b.n	80068ae <HAL_UART_IRQHandler+0x76a>
      return;
 80068a4:	bf00      	nop
 80068a6:	e002      	b.n	80068ae <HAL_UART_IRQHandler+0x76a>
      return;
 80068a8:	bf00      	nop
 80068aa:	e000      	b.n	80068ae <HAL_UART_IRQHandler+0x76a>
    return;
 80068ac:	bf00      	nop
  }
}
 80068ae:	37e8      	adds	r7, #232	; 0xe8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	effffffe 	.word	0xeffffffe

080068b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800690c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006910:	b092      	sub	sp, #72	; 0x48
 8006912:	af00      	add	r7, sp, #0
 8006914:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	431a      	orrs	r2, r3
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	431a      	orrs	r2, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	4313      	orrs	r3, r2
 8006932:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4bbe      	ldr	r3, [pc, #760]	; (8006c34 <UART_SetConfig+0x328>)
 800693c:	4013      	ands	r3, r2
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006944:	430b      	orrs	r3, r1
 8006946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4ab3      	ldr	r2, [pc, #716]	; (8006c38 <UART_SetConfig+0x32c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006974:	4313      	orrs	r3, r2
 8006976:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	4baf      	ldr	r3, [pc, #700]	; (8006c3c <UART_SetConfig+0x330>)
 8006980:	4013      	ands	r3, r2
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006988:	430b      	orrs	r3, r1
 800698a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	f023 010f 	bic.w	r1, r3, #15
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4aa6      	ldr	r2, [pc, #664]	; (8006c40 <UART_SetConfig+0x334>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d177      	bne.n	8006a9c <UART_SetConfig+0x190>
 80069ac:	4ba5      	ldr	r3, [pc, #660]	; (8006c44 <UART_SetConfig+0x338>)
 80069ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069b4:	2b28      	cmp	r3, #40	; 0x28
 80069b6:	d86d      	bhi.n	8006a94 <UART_SetConfig+0x188>
 80069b8:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <UART_SetConfig+0xb4>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	08006a65 	.word	0x08006a65
 80069c4:	08006a95 	.word	0x08006a95
 80069c8:	08006a95 	.word	0x08006a95
 80069cc:	08006a95 	.word	0x08006a95
 80069d0:	08006a95 	.word	0x08006a95
 80069d4:	08006a95 	.word	0x08006a95
 80069d8:	08006a95 	.word	0x08006a95
 80069dc:	08006a95 	.word	0x08006a95
 80069e0:	08006a6d 	.word	0x08006a6d
 80069e4:	08006a95 	.word	0x08006a95
 80069e8:	08006a95 	.word	0x08006a95
 80069ec:	08006a95 	.word	0x08006a95
 80069f0:	08006a95 	.word	0x08006a95
 80069f4:	08006a95 	.word	0x08006a95
 80069f8:	08006a95 	.word	0x08006a95
 80069fc:	08006a95 	.word	0x08006a95
 8006a00:	08006a75 	.word	0x08006a75
 8006a04:	08006a95 	.word	0x08006a95
 8006a08:	08006a95 	.word	0x08006a95
 8006a0c:	08006a95 	.word	0x08006a95
 8006a10:	08006a95 	.word	0x08006a95
 8006a14:	08006a95 	.word	0x08006a95
 8006a18:	08006a95 	.word	0x08006a95
 8006a1c:	08006a95 	.word	0x08006a95
 8006a20:	08006a7d 	.word	0x08006a7d
 8006a24:	08006a95 	.word	0x08006a95
 8006a28:	08006a95 	.word	0x08006a95
 8006a2c:	08006a95 	.word	0x08006a95
 8006a30:	08006a95 	.word	0x08006a95
 8006a34:	08006a95 	.word	0x08006a95
 8006a38:	08006a95 	.word	0x08006a95
 8006a3c:	08006a95 	.word	0x08006a95
 8006a40:	08006a85 	.word	0x08006a85
 8006a44:	08006a95 	.word	0x08006a95
 8006a48:	08006a95 	.word	0x08006a95
 8006a4c:	08006a95 	.word	0x08006a95
 8006a50:	08006a95 	.word	0x08006a95
 8006a54:	08006a95 	.word	0x08006a95
 8006a58:	08006a95 	.word	0x08006a95
 8006a5c:	08006a95 	.word	0x08006a95
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a6a:	e326      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a72:	e322      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006a74:	2308      	movs	r3, #8
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a7a:	e31e      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a82:	e31a      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006a84:	2320      	movs	r3, #32
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8a:	e316      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006a8c:	2340      	movs	r3, #64	; 0x40
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a92:	e312      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006a94:	2380      	movs	r3, #128	; 0x80
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9a:	e30e      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a69      	ldr	r2, [pc, #420]	; (8006c48 <UART_SetConfig+0x33c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d130      	bne.n	8006b08 <UART_SetConfig+0x1fc>
 8006aa6:	4b67      	ldr	r3, [pc, #412]	; (8006c44 <UART_SetConfig+0x338>)
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	d826      	bhi.n	8006b00 <UART_SetConfig+0x1f4>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <UART_SetConfig+0x1ac>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006ad1 	.word	0x08006ad1
 8006abc:	08006ad9 	.word	0x08006ad9
 8006ac0:	08006ae1 	.word	0x08006ae1
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad6:	e2f0      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006ad8:	2304      	movs	r3, #4
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ade:	e2ec      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae6:	e2e8      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006ae8:	2310      	movs	r3, #16
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aee:	e2e4      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006af0:	2320      	movs	r3, #32
 8006af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af6:	e2e0      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006af8:	2340      	movs	r3, #64	; 0x40
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afe:	e2dc      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e2d8      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a4f      	ldr	r2, [pc, #316]	; (8006c4c <UART_SetConfig+0x340>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d130      	bne.n	8006b74 <UART_SetConfig+0x268>
 8006b12:	4b4c      	ldr	r3, [pc, #304]	; (8006c44 <UART_SetConfig+0x338>)
 8006b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	2b05      	cmp	r3, #5
 8006b1c:	d826      	bhi.n	8006b6c <UART_SetConfig+0x260>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <UART_SetConfig+0x218>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b3d 	.word	0x08006b3d
 8006b28:	08006b45 	.word	0x08006b45
 8006b2c:	08006b4d 	.word	0x08006b4d
 8006b30:	08006b55 	.word	0x08006b55
 8006b34:	08006b5d 	.word	0x08006b5d
 8006b38:	08006b65 	.word	0x08006b65
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b42:	e2ba      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006b44:	2304      	movs	r3, #4
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4a:	e2b6      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006b4c:	2308      	movs	r3, #8
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b52:	e2b2      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006b54:	2310      	movs	r3, #16
 8006b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5a:	e2ae      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006b5c:	2320      	movs	r3, #32
 8006b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b62:	e2aa      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006b64:	2340      	movs	r3, #64	; 0x40
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6a:	e2a6      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b72:	e2a2      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a35      	ldr	r2, [pc, #212]	; (8006c50 <UART_SetConfig+0x344>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d130      	bne.n	8006be0 <UART_SetConfig+0x2d4>
 8006b7e:	4b31      	ldr	r3, [pc, #196]	; (8006c44 <UART_SetConfig+0x338>)
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b05      	cmp	r3, #5
 8006b88:	d826      	bhi.n	8006bd8 <UART_SetConfig+0x2cc>
 8006b8a:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <UART_SetConfig+0x284>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006ba9 	.word	0x08006ba9
 8006b94:	08006bb1 	.word	0x08006bb1
 8006b98:	08006bb9 	.word	0x08006bb9
 8006b9c:	08006bc1 	.word	0x08006bc1
 8006ba0:	08006bc9 	.word	0x08006bc9
 8006ba4:	08006bd1 	.word	0x08006bd1
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bae:	e284      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb6:	e280      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bbe:	e27c      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bc6:	e278      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006bc8:	2320      	movs	r3, #32
 8006bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bce:	e274      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006bd0:	2340      	movs	r3, #64	; 0x40
 8006bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd6:	e270      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006bd8:	2380      	movs	r3, #128	; 0x80
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bde:	e26c      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1b      	ldr	r2, [pc, #108]	; (8006c54 <UART_SetConfig+0x348>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d142      	bne.n	8006c70 <UART_SetConfig+0x364>
 8006bea:	4b16      	ldr	r3, [pc, #88]	; (8006c44 <UART_SetConfig+0x338>)
 8006bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	2b05      	cmp	r3, #5
 8006bf4:	d838      	bhi.n	8006c68 <UART_SetConfig+0x35c>
 8006bf6:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0x2f0>)
 8006bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfc:	08006c15 	.word	0x08006c15
 8006c00:	08006c1d 	.word	0x08006c1d
 8006c04:	08006c25 	.word	0x08006c25
 8006c08:	08006c2d 	.word	0x08006c2d
 8006c0c:	08006c59 	.word	0x08006c59
 8006c10:	08006c61 	.word	0x08006c61
 8006c14:	2300      	movs	r3, #0
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1a:	e24e      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c22:	e24a      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006c24:	2308      	movs	r3, #8
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2a:	e246      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c32:	e242      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006c34:	cfff69f3 	.word	0xcfff69f3
 8006c38:	58000c00 	.word	0x58000c00
 8006c3c:	11fff4ff 	.word	0x11fff4ff
 8006c40:	40011000 	.word	0x40011000
 8006c44:	58024400 	.word	0x58024400
 8006c48:	40004400 	.word	0x40004400
 8006c4c:	40004800 	.word	0x40004800
 8006c50:	40004c00 	.word	0x40004c00
 8006c54:	40005000 	.word	0x40005000
 8006c58:	2320      	movs	r3, #32
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5e:	e22c      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006c60:	2340      	movs	r3, #64	; 0x40
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e228      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006c68:	2380      	movs	r3, #128	; 0x80
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e224      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4ab1      	ldr	r2, [pc, #708]	; (8006f3c <UART_SetConfig+0x630>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d176      	bne.n	8006d68 <UART_SetConfig+0x45c>
 8006c7a:	4bb1      	ldr	r3, [pc, #708]	; (8006f40 <UART_SetConfig+0x634>)
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c82:	2b28      	cmp	r3, #40	; 0x28
 8006c84:	d86c      	bhi.n	8006d60 <UART_SetConfig+0x454>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <UART_SetConfig+0x380>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006d31 	.word	0x08006d31
 8006c90:	08006d61 	.word	0x08006d61
 8006c94:	08006d61 	.word	0x08006d61
 8006c98:	08006d61 	.word	0x08006d61
 8006c9c:	08006d61 	.word	0x08006d61
 8006ca0:	08006d61 	.word	0x08006d61
 8006ca4:	08006d61 	.word	0x08006d61
 8006ca8:	08006d61 	.word	0x08006d61
 8006cac:	08006d39 	.word	0x08006d39
 8006cb0:	08006d61 	.word	0x08006d61
 8006cb4:	08006d61 	.word	0x08006d61
 8006cb8:	08006d61 	.word	0x08006d61
 8006cbc:	08006d61 	.word	0x08006d61
 8006cc0:	08006d61 	.word	0x08006d61
 8006cc4:	08006d61 	.word	0x08006d61
 8006cc8:	08006d61 	.word	0x08006d61
 8006ccc:	08006d41 	.word	0x08006d41
 8006cd0:	08006d61 	.word	0x08006d61
 8006cd4:	08006d61 	.word	0x08006d61
 8006cd8:	08006d61 	.word	0x08006d61
 8006cdc:	08006d61 	.word	0x08006d61
 8006ce0:	08006d61 	.word	0x08006d61
 8006ce4:	08006d61 	.word	0x08006d61
 8006ce8:	08006d61 	.word	0x08006d61
 8006cec:	08006d49 	.word	0x08006d49
 8006cf0:	08006d61 	.word	0x08006d61
 8006cf4:	08006d61 	.word	0x08006d61
 8006cf8:	08006d61 	.word	0x08006d61
 8006cfc:	08006d61 	.word	0x08006d61
 8006d00:	08006d61 	.word	0x08006d61
 8006d04:	08006d61 	.word	0x08006d61
 8006d08:	08006d61 	.word	0x08006d61
 8006d0c:	08006d51 	.word	0x08006d51
 8006d10:	08006d61 	.word	0x08006d61
 8006d14:	08006d61 	.word	0x08006d61
 8006d18:	08006d61 	.word	0x08006d61
 8006d1c:	08006d61 	.word	0x08006d61
 8006d20:	08006d61 	.word	0x08006d61
 8006d24:	08006d61 	.word	0x08006d61
 8006d28:	08006d61 	.word	0x08006d61
 8006d2c:	08006d59 	.word	0x08006d59
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d36:	e1c0      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3e:	e1bc      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006d40:	2308      	movs	r3, #8
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d46:	e1b8      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4e:	e1b4      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006d50:	2320      	movs	r3, #32
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e1b0      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006d58:	2340      	movs	r3, #64	; 0x40
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e1ac      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006d60:	2380      	movs	r3, #128	; 0x80
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e1a8      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a75      	ldr	r2, [pc, #468]	; (8006f44 <UART_SetConfig+0x638>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d130      	bne.n	8006dd4 <UART_SetConfig+0x4c8>
 8006d72:	4b73      	ldr	r3, [pc, #460]	; (8006f40 <UART_SetConfig+0x634>)
 8006d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	2b05      	cmp	r3, #5
 8006d7c:	d826      	bhi.n	8006dcc <UART_SetConfig+0x4c0>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0x478>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006d9d 	.word	0x08006d9d
 8006d88:	08006da5 	.word	0x08006da5
 8006d8c:	08006dad 	.word	0x08006dad
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dbd 	.word	0x08006dbd
 8006d98:	08006dc5 	.word	0x08006dc5
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da2:	e18a      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006da4:	2304      	movs	r3, #4
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006daa:	e186      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006dac:	2308      	movs	r3, #8
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db2:	e182      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006db4:	2310      	movs	r3, #16
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dba:	e17e      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006dbc:	2320      	movs	r3, #32
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc2:	e17a      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006dc4:	2340      	movs	r3, #64	; 0x40
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dca:	e176      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006dcc:	2380      	movs	r3, #128	; 0x80
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd2:	e172      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a5b      	ldr	r2, [pc, #364]	; (8006f48 <UART_SetConfig+0x63c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d130      	bne.n	8006e40 <UART_SetConfig+0x534>
 8006dde:	4b58      	ldr	r3, [pc, #352]	; (8006f40 <UART_SetConfig+0x634>)
 8006de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	2b05      	cmp	r3, #5
 8006de8:	d826      	bhi.n	8006e38 <UART_SetConfig+0x52c>
 8006dea:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <UART_SetConfig+0x4e4>)
 8006dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df0:	08006e09 	.word	0x08006e09
 8006df4:	08006e11 	.word	0x08006e11
 8006df8:	08006e19 	.word	0x08006e19
 8006dfc:	08006e21 	.word	0x08006e21
 8006e00:	08006e29 	.word	0x08006e29
 8006e04:	08006e31 	.word	0x08006e31
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0e:	e154      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006e10:	2304      	movs	r3, #4
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e16:	e150      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006e18:	2308      	movs	r3, #8
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1e:	e14c      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006e20:	2310      	movs	r3, #16
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e26:	e148      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006e28:	2320      	movs	r3, #32
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2e:	e144      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006e30:	2340      	movs	r3, #64	; 0x40
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e140      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006e38:	2380      	movs	r3, #128	; 0x80
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e13c      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a41      	ldr	r2, [pc, #260]	; (8006f4c <UART_SetConfig+0x640>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f040 8082 	bne.w	8006f50 <UART_SetConfig+0x644>
 8006e4c:	4b3c      	ldr	r3, [pc, #240]	; (8006f40 <UART_SetConfig+0x634>)
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e54:	2b28      	cmp	r3, #40	; 0x28
 8006e56:	d86d      	bhi.n	8006f34 <UART_SetConfig+0x628>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <UART_SetConfig+0x554>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006f05 	.word	0x08006f05
 8006e64:	08006f35 	.word	0x08006f35
 8006e68:	08006f35 	.word	0x08006f35
 8006e6c:	08006f35 	.word	0x08006f35
 8006e70:	08006f35 	.word	0x08006f35
 8006e74:	08006f35 	.word	0x08006f35
 8006e78:	08006f35 	.word	0x08006f35
 8006e7c:	08006f35 	.word	0x08006f35
 8006e80:	08006f0d 	.word	0x08006f0d
 8006e84:	08006f35 	.word	0x08006f35
 8006e88:	08006f35 	.word	0x08006f35
 8006e8c:	08006f35 	.word	0x08006f35
 8006e90:	08006f35 	.word	0x08006f35
 8006e94:	08006f35 	.word	0x08006f35
 8006e98:	08006f35 	.word	0x08006f35
 8006e9c:	08006f35 	.word	0x08006f35
 8006ea0:	08006f15 	.word	0x08006f15
 8006ea4:	08006f35 	.word	0x08006f35
 8006ea8:	08006f35 	.word	0x08006f35
 8006eac:	08006f35 	.word	0x08006f35
 8006eb0:	08006f35 	.word	0x08006f35
 8006eb4:	08006f35 	.word	0x08006f35
 8006eb8:	08006f35 	.word	0x08006f35
 8006ebc:	08006f35 	.word	0x08006f35
 8006ec0:	08006f1d 	.word	0x08006f1d
 8006ec4:	08006f35 	.word	0x08006f35
 8006ec8:	08006f35 	.word	0x08006f35
 8006ecc:	08006f35 	.word	0x08006f35
 8006ed0:	08006f35 	.word	0x08006f35
 8006ed4:	08006f35 	.word	0x08006f35
 8006ed8:	08006f35 	.word	0x08006f35
 8006edc:	08006f35 	.word	0x08006f35
 8006ee0:	08006f25 	.word	0x08006f25
 8006ee4:	08006f35 	.word	0x08006f35
 8006ee8:	08006f35 	.word	0x08006f35
 8006eec:	08006f35 	.word	0x08006f35
 8006ef0:	08006f35 	.word	0x08006f35
 8006ef4:	08006f35 	.word	0x08006f35
 8006ef8:	08006f35 	.word	0x08006f35
 8006efc:	08006f35 	.word	0x08006f35
 8006f00:	08006f2d 	.word	0x08006f2d
 8006f04:	2301      	movs	r3, #1
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0a:	e0d6      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f12:	e0d2      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006f14:	2308      	movs	r3, #8
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e0ce      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e0ca      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006f24:	2320      	movs	r3, #32
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e0c6      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006f2c:	2340      	movs	r3, #64	; 0x40
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e0c2      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006f34:	2380      	movs	r3, #128	; 0x80
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e0be      	b.n	80070ba <UART_SetConfig+0x7ae>
 8006f3c:	40011400 	.word	0x40011400
 8006f40:	58024400 	.word	0x58024400
 8006f44:	40007800 	.word	0x40007800
 8006f48:	40007c00 	.word	0x40007c00
 8006f4c:	40011800 	.word	0x40011800
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4aad      	ldr	r2, [pc, #692]	; (800720c <UART_SetConfig+0x900>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d176      	bne.n	8007048 <UART_SetConfig+0x73c>
 8006f5a:	4bad      	ldr	r3, [pc, #692]	; (8007210 <UART_SetConfig+0x904>)
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f62:	2b28      	cmp	r3, #40	; 0x28
 8006f64:	d86c      	bhi.n	8007040 <UART_SetConfig+0x734>
 8006f66:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <UART_SetConfig+0x660>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08007011 	.word	0x08007011
 8006f70:	08007041 	.word	0x08007041
 8006f74:	08007041 	.word	0x08007041
 8006f78:	08007041 	.word	0x08007041
 8006f7c:	08007041 	.word	0x08007041
 8006f80:	08007041 	.word	0x08007041
 8006f84:	08007041 	.word	0x08007041
 8006f88:	08007041 	.word	0x08007041
 8006f8c:	08007019 	.word	0x08007019
 8006f90:	08007041 	.word	0x08007041
 8006f94:	08007041 	.word	0x08007041
 8006f98:	08007041 	.word	0x08007041
 8006f9c:	08007041 	.word	0x08007041
 8006fa0:	08007041 	.word	0x08007041
 8006fa4:	08007041 	.word	0x08007041
 8006fa8:	08007041 	.word	0x08007041
 8006fac:	08007021 	.word	0x08007021
 8006fb0:	08007041 	.word	0x08007041
 8006fb4:	08007041 	.word	0x08007041
 8006fb8:	08007041 	.word	0x08007041
 8006fbc:	08007041 	.word	0x08007041
 8006fc0:	08007041 	.word	0x08007041
 8006fc4:	08007041 	.word	0x08007041
 8006fc8:	08007041 	.word	0x08007041
 8006fcc:	08007029 	.word	0x08007029
 8006fd0:	08007041 	.word	0x08007041
 8006fd4:	08007041 	.word	0x08007041
 8006fd8:	08007041 	.word	0x08007041
 8006fdc:	08007041 	.word	0x08007041
 8006fe0:	08007041 	.word	0x08007041
 8006fe4:	08007041 	.word	0x08007041
 8006fe8:	08007041 	.word	0x08007041
 8006fec:	08007031 	.word	0x08007031
 8006ff0:	08007041 	.word	0x08007041
 8006ff4:	08007041 	.word	0x08007041
 8006ff8:	08007041 	.word	0x08007041
 8006ffc:	08007041 	.word	0x08007041
 8007000:	08007041 	.word	0x08007041
 8007004:	08007041 	.word	0x08007041
 8007008:	08007041 	.word	0x08007041
 800700c:	08007039 	.word	0x08007039
 8007010:	2301      	movs	r3, #1
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007016:	e050      	b.n	80070ba <UART_SetConfig+0x7ae>
 8007018:	2304      	movs	r3, #4
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701e:	e04c      	b.n	80070ba <UART_SetConfig+0x7ae>
 8007020:	2308      	movs	r3, #8
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007026:	e048      	b.n	80070ba <UART_SetConfig+0x7ae>
 8007028:	2310      	movs	r3, #16
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702e:	e044      	b.n	80070ba <UART_SetConfig+0x7ae>
 8007030:	2320      	movs	r3, #32
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007036:	e040      	b.n	80070ba <UART_SetConfig+0x7ae>
 8007038:	2340      	movs	r3, #64	; 0x40
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703e:	e03c      	b.n	80070ba <UART_SetConfig+0x7ae>
 8007040:	2380      	movs	r3, #128	; 0x80
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007046:	e038      	b.n	80070ba <UART_SetConfig+0x7ae>
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a71      	ldr	r2, [pc, #452]	; (8007214 <UART_SetConfig+0x908>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d130      	bne.n	80070b4 <UART_SetConfig+0x7a8>
 8007052:	4b6f      	ldr	r3, [pc, #444]	; (8007210 <UART_SetConfig+0x904>)
 8007054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	2b05      	cmp	r3, #5
 800705c:	d826      	bhi.n	80070ac <UART_SetConfig+0x7a0>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <UART_SetConfig+0x758>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	0800707d 	.word	0x0800707d
 8007068:	08007085 	.word	0x08007085
 800706c:	0800708d 	.word	0x0800708d
 8007070:	08007095 	.word	0x08007095
 8007074:	0800709d 	.word	0x0800709d
 8007078:	080070a5 	.word	0x080070a5
 800707c:	2302      	movs	r3, #2
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007082:	e01a      	b.n	80070ba <UART_SetConfig+0x7ae>
 8007084:	2304      	movs	r3, #4
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708a:	e016      	b.n	80070ba <UART_SetConfig+0x7ae>
 800708c:	2308      	movs	r3, #8
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007092:	e012      	b.n	80070ba <UART_SetConfig+0x7ae>
 8007094:	2310      	movs	r3, #16
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709a:	e00e      	b.n	80070ba <UART_SetConfig+0x7ae>
 800709c:	2320      	movs	r3, #32
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a2:	e00a      	b.n	80070ba <UART_SetConfig+0x7ae>
 80070a4:	2340      	movs	r3, #64	; 0x40
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070aa:	e006      	b.n	80070ba <UART_SetConfig+0x7ae>
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b2:	e002      	b.n	80070ba <UART_SetConfig+0x7ae>
 80070b4:	2380      	movs	r3, #128	; 0x80
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a55      	ldr	r2, [pc, #340]	; (8007214 <UART_SetConfig+0x908>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	f040 80f8 	bne.w	80072b6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	dc46      	bgt.n	800715c <UART_SetConfig+0x850>
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	db75      	blt.n	80071be <UART_SetConfig+0x8b2>
 80070d2:	3b02      	subs	r3, #2
 80070d4:	2b1e      	cmp	r3, #30
 80070d6:	d872      	bhi.n	80071be <UART_SetConfig+0x8b2>
 80070d8:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <UART_SetConfig+0x7d4>)
 80070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070de:	bf00      	nop
 80070e0:	08007163 	.word	0x08007163
 80070e4:	080071bf 	.word	0x080071bf
 80070e8:	0800716b 	.word	0x0800716b
 80070ec:	080071bf 	.word	0x080071bf
 80070f0:	080071bf 	.word	0x080071bf
 80070f4:	080071bf 	.word	0x080071bf
 80070f8:	0800717b 	.word	0x0800717b
 80070fc:	080071bf 	.word	0x080071bf
 8007100:	080071bf 	.word	0x080071bf
 8007104:	080071bf 	.word	0x080071bf
 8007108:	080071bf 	.word	0x080071bf
 800710c:	080071bf 	.word	0x080071bf
 8007110:	080071bf 	.word	0x080071bf
 8007114:	080071bf 	.word	0x080071bf
 8007118:	0800718b 	.word	0x0800718b
 800711c:	080071bf 	.word	0x080071bf
 8007120:	080071bf 	.word	0x080071bf
 8007124:	080071bf 	.word	0x080071bf
 8007128:	080071bf 	.word	0x080071bf
 800712c:	080071bf 	.word	0x080071bf
 8007130:	080071bf 	.word	0x080071bf
 8007134:	080071bf 	.word	0x080071bf
 8007138:	080071bf 	.word	0x080071bf
 800713c:	080071bf 	.word	0x080071bf
 8007140:	080071bf 	.word	0x080071bf
 8007144:	080071bf 	.word	0x080071bf
 8007148:	080071bf 	.word	0x080071bf
 800714c:	080071bf 	.word	0x080071bf
 8007150:	080071bf 	.word	0x080071bf
 8007154:	080071bf 	.word	0x080071bf
 8007158:	080071b1 	.word	0x080071b1
 800715c:	2b40      	cmp	r3, #64	; 0x40
 800715e:	d02a      	beq.n	80071b6 <UART_SetConfig+0x8aa>
 8007160:	e02d      	b.n	80071be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007162:	f7fd fa05 	bl	8004570 <HAL_RCCEx_GetD3PCLK1Freq>
 8007166:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007168:	e02f      	b.n	80071ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800716a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800716e:	4618      	mov	r0, r3
 8007170:	f7fd fa14 	bl	800459c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007178:	e027      	b.n	80071ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800717a:	f107 0318 	add.w	r3, r7, #24
 800717e:	4618      	mov	r0, r3
 8007180:	f7fd fb60 	bl	8004844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007188:	e01f      	b.n	80071ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800718a:	4b21      	ldr	r3, [pc, #132]	; (8007210 <UART_SetConfig+0x904>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007196:	4b1e      	ldr	r3, [pc, #120]	; (8007210 <UART_SetConfig+0x904>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	08db      	lsrs	r3, r3, #3
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	4a1d      	ldr	r2, [pc, #116]	; (8007218 <UART_SetConfig+0x90c>)
 80071a2:	fa22 f303 	lsr.w	r3, r2, r3
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071a8:	e00f      	b.n	80071ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80071aa:	4b1b      	ldr	r3, [pc, #108]	; (8007218 <UART_SetConfig+0x90c>)
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ae:	e00c      	b.n	80071ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071b0:	4b1a      	ldr	r3, [pc, #104]	; (800721c <UART_SetConfig+0x910>)
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071b4:	e009      	b.n	80071ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071bc:	e005      	b.n	80071ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 81ee 	beq.w	80075ae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	4a12      	ldr	r2, [pc, #72]	; (8007220 <UART_SetConfig+0x914>)
 80071d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071dc:	461a      	mov	r2, r3
 80071de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80071e4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	4613      	mov	r3, r2
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	4413      	add	r3, r2
 80071f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d305      	bcc.n	8007202 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	429a      	cmp	r2, r3
 8007200:	d910      	bls.n	8007224 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007208:	e1d1      	b.n	80075ae <UART_SetConfig+0xca2>
 800720a:	bf00      	nop
 800720c:	40011c00 	.word	0x40011c00
 8007210:	58024400 	.word	0x58024400
 8007214:	58000c00 	.word	0x58000c00
 8007218:	03d09000 	.word	0x03d09000
 800721c:	003d0900 	.word	0x003d0900
 8007220:	08008b3c 	.word	0x08008b3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007226:	2200      	movs	r2, #0
 8007228:	60bb      	str	r3, [r7, #8]
 800722a:	60fa      	str	r2, [r7, #12]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	4ac0      	ldr	r2, [pc, #768]	; (8007534 <UART_SetConfig+0xc28>)
 8007232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007236:	b29b      	uxth	r3, r3
 8007238:	2200      	movs	r2, #0
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007242:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007246:	f7f9 f851 	bl	80002ec <__aeabi_uldivmod>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4610      	mov	r0, r2
 8007250:	4619      	mov	r1, r3
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	020b      	lsls	r3, r1, #8
 800725c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007260:	0202      	lsls	r2, r0, #8
 8007262:	6979      	ldr	r1, [r7, #20]
 8007264:	6849      	ldr	r1, [r1, #4]
 8007266:	0849      	lsrs	r1, r1, #1
 8007268:	2000      	movs	r0, #0
 800726a:	460c      	mov	r4, r1
 800726c:	4605      	mov	r5, r0
 800726e:	eb12 0804 	adds.w	r8, r2, r4
 8007272:	eb43 0905 	adc.w	r9, r3, r5
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	469a      	mov	sl, r3
 800727e:	4693      	mov	fp, r2
 8007280:	4652      	mov	r2, sl
 8007282:	465b      	mov	r3, fp
 8007284:	4640      	mov	r0, r8
 8007286:	4649      	mov	r1, r9
 8007288:	f7f9 f830 	bl	80002ec <__aeabi_uldivmod>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4613      	mov	r3, r2
 8007292:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800729a:	d308      	bcc.n	80072ae <UART_SetConfig+0x9a2>
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a2:	d204      	bcs.n	80072ae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072aa:	60da      	str	r2, [r3, #12]
 80072ac:	e17f      	b.n	80075ae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80072b4:	e17b      	b.n	80075ae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072be:	f040 80bd 	bne.w	800743c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80072c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072c6:	2b20      	cmp	r3, #32
 80072c8:	dc48      	bgt.n	800735c <UART_SetConfig+0xa50>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	db7b      	blt.n	80073c6 <UART_SetConfig+0xaba>
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d879      	bhi.n	80073c6 <UART_SetConfig+0xaba>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <UART_SetConfig+0x9cc>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	08007363 	.word	0x08007363
 80072dc:	0800736b 	.word	0x0800736b
 80072e0:	080073c7 	.word	0x080073c7
 80072e4:	080073c7 	.word	0x080073c7
 80072e8:	08007373 	.word	0x08007373
 80072ec:	080073c7 	.word	0x080073c7
 80072f0:	080073c7 	.word	0x080073c7
 80072f4:	080073c7 	.word	0x080073c7
 80072f8:	08007383 	.word	0x08007383
 80072fc:	080073c7 	.word	0x080073c7
 8007300:	080073c7 	.word	0x080073c7
 8007304:	080073c7 	.word	0x080073c7
 8007308:	080073c7 	.word	0x080073c7
 800730c:	080073c7 	.word	0x080073c7
 8007310:	080073c7 	.word	0x080073c7
 8007314:	080073c7 	.word	0x080073c7
 8007318:	08007393 	.word	0x08007393
 800731c:	080073c7 	.word	0x080073c7
 8007320:	080073c7 	.word	0x080073c7
 8007324:	080073c7 	.word	0x080073c7
 8007328:	080073c7 	.word	0x080073c7
 800732c:	080073c7 	.word	0x080073c7
 8007330:	080073c7 	.word	0x080073c7
 8007334:	080073c7 	.word	0x080073c7
 8007338:	080073c7 	.word	0x080073c7
 800733c:	080073c7 	.word	0x080073c7
 8007340:	080073c7 	.word	0x080073c7
 8007344:	080073c7 	.word	0x080073c7
 8007348:	080073c7 	.word	0x080073c7
 800734c:	080073c7 	.word	0x080073c7
 8007350:	080073c7 	.word	0x080073c7
 8007354:	080073c7 	.word	0x080073c7
 8007358:	080073b9 	.word	0x080073b9
 800735c:	2b40      	cmp	r3, #64	; 0x40
 800735e:	d02e      	beq.n	80073be <UART_SetConfig+0xab2>
 8007360:	e031      	b.n	80073c6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007362:	f7fb ff1b 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8007366:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007368:	e033      	b.n	80073d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800736a:	f7fb ff2d 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 800736e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007370:	e02f      	b.n	80073d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007376:	4618      	mov	r0, r3
 8007378:	f7fd f910 	bl	800459c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007380:	e027      	b.n	80073d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007382:	f107 0318 	add.w	r3, r7, #24
 8007386:	4618      	mov	r0, r3
 8007388:	f7fd fa5c 	bl	8004844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007390:	e01f      	b.n	80073d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007392:	4b69      	ldr	r3, [pc, #420]	; (8007538 <UART_SetConfig+0xc2c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b00      	cmp	r3, #0
 800739c:	d009      	beq.n	80073b2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800739e:	4b66      	ldr	r3, [pc, #408]	; (8007538 <UART_SetConfig+0xc2c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	08db      	lsrs	r3, r3, #3
 80073a4:	f003 0303 	and.w	r3, r3, #3
 80073a8:	4a64      	ldr	r2, [pc, #400]	; (800753c <UART_SetConfig+0xc30>)
 80073aa:	fa22 f303 	lsr.w	r3, r2, r3
 80073ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073b0:	e00f      	b.n	80073d2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80073b2:	4b62      	ldr	r3, [pc, #392]	; (800753c <UART_SetConfig+0xc30>)
 80073b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073b6:	e00c      	b.n	80073d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073b8:	4b61      	ldr	r3, [pc, #388]	; (8007540 <UART_SetConfig+0xc34>)
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073bc:	e009      	b.n	80073d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c4:	e005      	b.n	80073d2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 80ea 	beq.w	80075ae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	4a55      	ldr	r2, [pc, #340]	; (8007534 <UART_SetConfig+0xc28>)
 80073e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e4:	461a      	mov	r2, r3
 80073e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ec:	005a      	lsls	r2, r3, #1
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	085b      	lsrs	r3, r3, #1
 80073f4:	441a      	add	r2, r3
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	2b0f      	cmp	r3, #15
 8007404:	d916      	bls.n	8007434 <UART_SetConfig+0xb28>
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740c:	d212      	bcs.n	8007434 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	b29b      	uxth	r3, r3
 8007412:	f023 030f 	bic.w	r3, r3, #15
 8007416:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	b29b      	uxth	r3, r3
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	b29a      	uxth	r2, r3
 8007424:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007426:	4313      	orrs	r3, r2
 8007428:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007430:	60da      	str	r2, [r3, #12]
 8007432:	e0bc      	b.n	80075ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800743a:	e0b8      	b.n	80075ae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800743c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007440:	2b20      	cmp	r3, #32
 8007442:	dc4b      	bgt.n	80074dc <UART_SetConfig+0xbd0>
 8007444:	2b00      	cmp	r3, #0
 8007446:	f2c0 8087 	blt.w	8007558 <UART_SetConfig+0xc4c>
 800744a:	2b20      	cmp	r3, #32
 800744c:	f200 8084 	bhi.w	8007558 <UART_SetConfig+0xc4c>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <UART_SetConfig+0xb4c>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	080074e3 	.word	0x080074e3
 800745c:	080074eb 	.word	0x080074eb
 8007460:	08007559 	.word	0x08007559
 8007464:	08007559 	.word	0x08007559
 8007468:	080074f3 	.word	0x080074f3
 800746c:	08007559 	.word	0x08007559
 8007470:	08007559 	.word	0x08007559
 8007474:	08007559 	.word	0x08007559
 8007478:	08007503 	.word	0x08007503
 800747c:	08007559 	.word	0x08007559
 8007480:	08007559 	.word	0x08007559
 8007484:	08007559 	.word	0x08007559
 8007488:	08007559 	.word	0x08007559
 800748c:	08007559 	.word	0x08007559
 8007490:	08007559 	.word	0x08007559
 8007494:	08007559 	.word	0x08007559
 8007498:	08007513 	.word	0x08007513
 800749c:	08007559 	.word	0x08007559
 80074a0:	08007559 	.word	0x08007559
 80074a4:	08007559 	.word	0x08007559
 80074a8:	08007559 	.word	0x08007559
 80074ac:	08007559 	.word	0x08007559
 80074b0:	08007559 	.word	0x08007559
 80074b4:	08007559 	.word	0x08007559
 80074b8:	08007559 	.word	0x08007559
 80074bc:	08007559 	.word	0x08007559
 80074c0:	08007559 	.word	0x08007559
 80074c4:	08007559 	.word	0x08007559
 80074c8:	08007559 	.word	0x08007559
 80074cc:	08007559 	.word	0x08007559
 80074d0:	08007559 	.word	0x08007559
 80074d4:	08007559 	.word	0x08007559
 80074d8:	0800754b 	.word	0x0800754b
 80074dc:	2b40      	cmp	r3, #64	; 0x40
 80074de:	d037      	beq.n	8007550 <UART_SetConfig+0xc44>
 80074e0:	e03a      	b.n	8007558 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e2:	f7fb fe5b 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80074e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074e8:	e03c      	b.n	8007564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074ea:	f7fb fe6d 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 80074ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074f0:	e038      	b.n	8007564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fd f850 	bl	800459c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007500:	e030      	b.n	8007564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007502:	f107 0318 	add.w	r3, r7, #24
 8007506:	4618      	mov	r0, r3
 8007508:	f7fd f99c 	bl	8004844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007510:	e028      	b.n	8007564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007512:	4b09      	ldr	r3, [pc, #36]	; (8007538 <UART_SetConfig+0xc2c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0320 	and.w	r3, r3, #32
 800751a:	2b00      	cmp	r3, #0
 800751c:	d012      	beq.n	8007544 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <UART_SetConfig+0xc2c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	08db      	lsrs	r3, r3, #3
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	4a04      	ldr	r2, [pc, #16]	; (800753c <UART_SetConfig+0xc30>)
 800752a:	fa22 f303 	lsr.w	r3, r2, r3
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007530:	e018      	b.n	8007564 <UART_SetConfig+0xc58>
 8007532:	bf00      	nop
 8007534:	08008b3c 	.word	0x08008b3c
 8007538:	58024400 	.word	0x58024400
 800753c:	03d09000 	.word	0x03d09000
 8007540:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007544:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <UART_SetConfig+0xccc>)
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007548:	e00c      	b.n	8007564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800754a:	4b24      	ldr	r3, [pc, #144]	; (80075dc <UART_SetConfig+0xcd0>)
 800754c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800754e:	e009      	b.n	8007564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007556:	e005      	b.n	8007564 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007562:	bf00      	nop
    }

    if (pclk != 0U)
 8007564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007566:	2b00      	cmp	r3, #0
 8007568:	d021      	beq.n	80075ae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <UART_SetConfig+0xcd4>)
 8007570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007574:	461a      	mov	r2, r3
 8007576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007578:	fbb3 f2f2 	udiv	r2, r3, r2
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	085b      	lsrs	r3, r3, #1
 8007582:	441a      	add	r2, r3
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	2b0f      	cmp	r3, #15
 8007592:	d909      	bls.n	80075a8 <UART_SetConfig+0xc9c>
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759a:	d205      	bcs.n	80075a8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	b29a      	uxth	r2, r3
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60da      	str	r2, [r3, #12]
 80075a6:	e002      	b.n	80075ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2200      	movs	r2, #0
 80075c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2200      	movs	r2, #0
 80075c8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80075ca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3748      	adds	r7, #72	; 0x48
 80075d2:	46bd      	mov	sp, r7
 80075d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075d8:	03d09000 	.word	0x03d09000
 80075dc:	003d0900 	.word	0x003d0900
 80075e0:	08008b3c 	.word	0x08008b3c

080075e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f003 0310 	and.w	r3, r3, #16
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01a      	beq.n	80076fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e2:	d10a      	bne.n	80076fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	605a      	str	r2, [r3, #4]
  }
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b098      	sub	sp, #96	; 0x60
 800772c:	af02      	add	r7, sp, #8
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007738:	f7f9 fd14 	bl	8001164 <HAL_GetTick>
 800773c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	2b08      	cmp	r3, #8
 800774a:	d12f      	bne.n	80077ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800774c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007754:	2200      	movs	r2, #0
 8007756:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f88e 	bl	800787c <UART_WaitOnFlagUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d022      	beq.n	80077ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800777a:	653b      	str	r3, [r7, #80]	; 0x50
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007784:	647b      	str	r3, [r7, #68]	; 0x44
 8007786:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800778a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e6      	bne.n	8007766 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e063      	b.n	8007874 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d149      	bne.n	800784e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077c2:	2200      	movs	r2, #0
 80077c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f857 	bl	800787c <UART_WaitOnFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d03c      	beq.n	800784e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	623b      	str	r3, [r7, #32]
   return(result);
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f2:	633b      	str	r3, [r7, #48]	; 0x30
 80077f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e6      	bne.n	80077d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	60fb      	str	r3, [r7, #12]
   return(result);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f023 0301 	bic.w	r3, r3, #1
 800781c:	64bb      	str	r3, [r7, #72]	; 0x48
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007826:	61fa      	str	r2, [r7, #28]
 8007828:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	69b9      	ldr	r1, [r7, #24]
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	617b      	str	r3, [r7, #20]
   return(result);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e5      	bne.n	8007806 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e012      	b.n	8007874 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2220      	movs	r2, #32
 8007852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3758      	adds	r7, #88	; 0x58
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	603b      	str	r3, [r7, #0]
 8007888:	4613      	mov	r3, r2
 800788a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800788c:	e04f      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007894:	d04b      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007896:	f7f9 fc65 	bl	8001164 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d302      	bcc.n	80078ac <UART_WaitOnFlagUntilTimeout+0x30>
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e04e      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0304 	and.w	r3, r3, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d037      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b80      	cmp	r3, #128	; 0x80
 80078c2:	d034      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b40      	cmp	r3, #64	; 0x40
 80078c8:	d031      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d110      	bne.n	80078fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2208      	movs	r2, #8
 80078de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f95b 	bl	8007b9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2208      	movs	r2, #8
 80078ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e029      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007908:	d111      	bne.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f941 	bl	8007b9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2220      	movs	r2, #32
 800791e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e00f      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69da      	ldr	r2, [r3, #28]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4013      	ands	r3, r2
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	429a      	cmp	r2, r3
 800793c:	bf0c      	ite	eq
 800793e:	2301      	moveq	r3, #1
 8007940:	2300      	movne	r3, #0
 8007942:	b2db      	uxtb	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	429a      	cmp	r2, r3
 800794a:	d0a0      	beq.n	800788e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007958:	b480      	push	{r7}
 800795a:	b0a3      	sub	sp, #140	; 0x8c
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	88fa      	ldrh	r2, [r7, #6]
 8007970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	88fa      	ldrh	r2, [r7, #6]
 8007978:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800798a:	d10e      	bne.n	80079aa <UART_Start_Receive_IT+0x52>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d105      	bne.n	80079a0 <UART_Start_Receive_IT+0x48>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f240 12ff 	movw	r2, #511	; 0x1ff
 800799a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800799e:	e02d      	b.n	80079fc <UART_Start_Receive_IT+0xa4>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	22ff      	movs	r2, #255	; 0xff
 80079a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079a8:	e028      	b.n	80079fc <UART_Start_Receive_IT+0xa4>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10d      	bne.n	80079ce <UART_Start_Receive_IT+0x76>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d104      	bne.n	80079c4 <UART_Start_Receive_IT+0x6c>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	22ff      	movs	r2, #255	; 0xff
 80079be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079c2:	e01b      	b.n	80079fc <UART_Start_Receive_IT+0xa4>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	227f      	movs	r2, #127	; 0x7f
 80079c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079cc:	e016      	b.n	80079fc <UART_Start_Receive_IT+0xa4>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079d6:	d10d      	bne.n	80079f4 <UART_Start_Receive_IT+0x9c>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <UART_Start_Receive_IT+0x92>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	227f      	movs	r2, #127	; 0x7f
 80079e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079e8:	e008      	b.n	80079fc <UART_Start_Receive_IT+0xa4>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	223f      	movs	r2, #63	; 0x3f
 80079ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079f2:	e003      	b.n	80079fc <UART_Start_Receive_IT+0xa4>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2222      	movs	r2, #34	; 0x22
 8007a08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3308      	adds	r3, #8
 8007a12:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a1e:	f043 0301 	orr.w	r3, r3, #1
 8007a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007a30:	673a      	str	r2, [r7, #112]	; 0x70
 8007a32:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007a36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e3      	bne.n	8007a0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a4c:	d14f      	bne.n	8007aee <UART_Start_Receive_IT+0x196>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a54:	88fa      	ldrh	r2, [r7, #6]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d349      	bcc.n	8007aee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a62:	d107      	bne.n	8007a74 <UART_Start_Receive_IT+0x11c>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d103      	bne.n	8007a74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a47      	ldr	r2, [pc, #284]	; (8007b8c <UART_Start_Receive_IT+0x234>)
 8007a70:	675a      	str	r2, [r3, #116]	; 0x74
 8007a72:	e002      	b.n	8007a7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4a46      	ldr	r2, [pc, #280]	; (8007b90 <UART_Start_Receive_IT+0x238>)
 8007a78:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d01a      	beq.n	8007ab8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007aaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e4      	bne.n	8007a82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3308      	adds	r3, #8
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ace:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ad8:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ada:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e5      	bne.n	8007ab8 <UART_Start_Receive_IT+0x160>
 8007aec:	e046      	b.n	8007b7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af6:	d107      	bne.n	8007b08 <UART_Start_Receive_IT+0x1b0>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d103      	bne.n	8007b08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4a24      	ldr	r2, [pc, #144]	; (8007b94 <UART_Start_Receive_IT+0x23c>)
 8007b04:	675a      	str	r2, [r3, #116]	; 0x74
 8007b06:	e002      	b.n	8007b0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4a23      	ldr	r2, [pc, #140]	; (8007b98 <UART_Start_Receive_IT+0x240>)
 8007b0c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d019      	beq.n	8007b4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007b2a:	677b      	str	r3, [r7, #116]	; 0x74
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
 8007b36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e6      	bne.n	8007b16 <UART_Start_Receive_IT+0x1be>
 8007b48:	e018      	b.n	8007b7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	613b      	str	r3, [r7, #16]
   return(result);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f043 0320 	orr.w	r3, r3, #32
 8007b5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b68:	623b      	str	r3, [r7, #32]
 8007b6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	69f9      	ldr	r1, [r7, #28]
 8007b6e:	6a3a      	ldr	r2, [r7, #32]
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e6      	bne.n	8007b4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	378c      	adds	r7, #140	; 0x8c
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	080083bd 	.word	0x080083bd
 8007b90:	0800805d 	.word	0x0800805d
 8007b94:	08007ea5 	.word	0x08007ea5
 8007b98:	08007ced 	.word	0x08007ced

08007b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b095      	sub	sp, #84	; 0x54
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e6      	bne.n	8007ba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	4b1e      	ldr	r3, [pc, #120]	; (8007c64 <UART_EndRxTransfer+0xc8>)
 8007bea:	4013      	ands	r3, r2
 8007bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e5      	bne.n	8007bd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d118      	bne.n	8007c44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f023 0310 	bic.w	r3, r3, #16
 8007c26:	647b      	str	r3, [r7, #68]	; 0x44
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6979      	ldr	r1, [r7, #20]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e6      	bne.n	8007c12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c58:	bf00      	nop
 8007c5a:	3754      	adds	r7, #84	; 0x54
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	effffffe 	.word	0xeffffffe

08007c68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7fe fe2a 	bl	80068e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6979      	ldr	r1, [r7, #20]
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e6      	bne.n	8007c9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fe fdeb 	bl	80068b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce2:	bf00      	nop
 8007ce4:	3720      	adds	r7, #32
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b09c      	sub	sp, #112	; 0x70
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007cfa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d04:	2b22      	cmp	r3, #34	; 0x22
 8007d06:	f040 80be 	bne.w	8007e86 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d18:	b2d9      	uxtb	r1, r3
 8007d1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d24:	400a      	ands	r2, r1
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f040 80a1 	bne.w	8007e96 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d68:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d72:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e6      	bne.n	8007d54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d98:	f023 0301 	bic.w	r3, r3, #1
 8007d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3308      	adds	r3, #8
 8007da4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007da6:	647a      	str	r2, [r7, #68]	; 0x44
 8007da8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e5      	bne.n	8007d86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a33      	ldr	r2, [pc, #204]	; (8007ea0 <UART_RxISR_8BIT+0x1b4>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d01f      	beq.n	8007e18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d018      	beq.n	8007e18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	623b      	str	r3, [r7, #32]
   return(result);
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007dfa:	663b      	str	r3, [r7, #96]	; 0x60
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e04:	633b      	str	r3, [r7, #48]	; 0x30
 8007e06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e6      	bne.n	8007de6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d12e      	bne.n	8007e7e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	e853 3f00 	ldrex	r3, [r3]
 8007e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0310 	bic.w	r3, r3, #16
 8007e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	461a      	mov	r2, r3
 8007e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e44:	61fb      	str	r3, [r7, #28]
 8007e46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e48:	69b9      	ldr	r1, [r7, #24]
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	e841 2300 	strex	r3, r2, [r1]
 8007e50:	617b      	str	r3, [r7, #20]
   return(result);
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e6      	bne.n	8007e26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	f003 0310 	and.w	r3, r3, #16
 8007e62:	2b10      	cmp	r3, #16
 8007e64:	d103      	bne.n	8007e6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2210      	movs	r2, #16
 8007e6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fe fd3c 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e7c:	e00b      	b.n	8007e96 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fe fd24 	bl	80068cc <HAL_UART_RxCpltCallback>
}
 8007e84:	e007      	b.n	8007e96 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	699a      	ldr	r2, [r3, #24]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f042 0208 	orr.w	r2, r2, #8
 8007e94:	619a      	str	r2, [r3, #24]
}
 8007e96:	bf00      	nop
 8007e98:	3770      	adds	r7, #112	; 0x70
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	58000c00 	.word	0x58000c00

08007ea4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b09c      	sub	sp, #112	; 0x70
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007eb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ebc:	2b22      	cmp	r3, #34	; 0x22
 8007ebe:	f040 80be 	bne.w	800803e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ed2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007ed6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007eda:	4013      	ands	r3, r2
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ee0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee6:	1c9a      	adds	r2, r3, #2
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f040 80a1 	bne.w	800804e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f20:	667b      	str	r3, [r7, #100]	; 0x64
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f2c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e6      	bne.n	8007f0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3308      	adds	r3, #8
 8007f44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	f023 0301 	bic.w	r3, r3, #1
 8007f54:	663b      	str	r3, [r7, #96]	; 0x60
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f5e:	643a      	str	r2, [r7, #64]	; 0x40
 8007f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e5      	bne.n	8007f3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a33      	ldr	r2, [pc, #204]	; (8008058 <UART_RxISR_16BIT+0x1b4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d01f      	beq.n	8007fd0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d018      	beq.n	8007fd0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fbe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e6      	bne.n	8007f9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d12e      	bne.n	8008036 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	e853 3f00 	ldrex	r3, [r3]
 8007fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f023 0310 	bic.w	r3, r3, #16
 8007ff2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ffc:	61bb      	str	r3, [r7, #24]
 8007ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	6979      	ldr	r1, [r7, #20]
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	613b      	str	r3, [r7, #16]
   return(result);
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e6      	bne.n	8007fde <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f003 0310 	and.w	r3, r3, #16
 800801a:	2b10      	cmp	r3, #16
 800801c:	d103      	bne.n	8008026 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2210      	movs	r2, #16
 8008024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7fe fc60 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008034:	e00b      	b.n	800804e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7fe fc48 	bl	80068cc <HAL_UART_RxCpltCallback>
}
 800803c:	e007      	b.n	800804e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0208 	orr.w	r2, r2, #8
 800804c:	619a      	str	r2, [r3, #24]
}
 800804e:	bf00      	nop
 8008050:	3770      	adds	r7, #112	; 0x70
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	58000c00 	.word	0x58000c00

0800805c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b0ac      	sub	sp, #176	; 0xb0
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800806a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008092:	2b22      	cmp	r3, #34	; 0x22
 8008094:	f040 8180 	bne.w	8008398 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800809e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080a2:	e123      	b.n	80082ec <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80080b2:	b2d9      	uxtb	r1, r3
 80080b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080be:	400a      	ands	r2, r1
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d053      	beq.n	800819e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d011      	beq.n	8008126 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00b      	beq.n	8008126 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2201      	movs	r2, #1
 8008114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811c:	f043 0201 	orr.w	r2, r3, #1
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d011      	beq.n	8008156 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2202      	movs	r2, #2
 8008144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814c:	f043 0204 	orr.w	r2, r3, #4
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d011      	beq.n	8008186 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00b      	beq.n	8008186 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2204      	movs	r2, #4
 8008174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817c:	f043 0202 	orr.w	r2, r3, #2
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818c:	2b00      	cmp	r3, #0
 800818e:	d006      	beq.n	800819e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fe fba5 	bl	80068e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f040 80a0 	bne.w	80082ec <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80081ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081d0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80081d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80081dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e4      	bne.n	80081ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80081f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081f4:	4b6e      	ldr	r3, [pc, #440]	; (80083b0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3308      	adds	r3, #8
 8008202:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008206:	66ba      	str	r2, [r7, #104]	; 0x68
 8008208:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800820c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e3      	bne.n	80081e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a60      	ldr	r2, [pc, #384]	; (80083b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d021      	beq.n	800827c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01a      	beq.n	800827c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008256:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800825a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008268:	657b      	str	r3, [r7, #84]	; 0x54
 800826a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800826e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e4      	bne.n	8008246 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d130      	bne.n	80082e6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	f023 0310 	bic.w	r3, r3, #16
 800829e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082ac:	643b      	str	r3, [r7, #64]	; 0x40
 80082ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e4      	bne.n	800828a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	f003 0310 	and.w	r3, r3, #16
 80082ca:	2b10      	cmp	r3, #16
 80082cc:	d103      	bne.n	80082d6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2210      	movs	r2, #16
 80082d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fe fb08 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
 80082e4:	e002      	b.n	80082ec <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fe faf0 	bl	80068cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d006      	beq.n	8008302 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80082f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082f8:	f003 0320 	and.w	r3, r3, #32
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f47f aed1 	bne.w	80080a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008308:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800830c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008310:	2b00      	cmp	r3, #0
 8008312:	d049      	beq.n	80083a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800831a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800831e:	429a      	cmp	r2, r3
 8008320:	d242      	bcs.n	80083a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	61fb      	str	r3, [r7, #28]
   return(result);
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800834c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e3      	bne.n	8008322 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a16      	ldr	r2, [pc, #88]	; (80083b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800835e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	60bb      	str	r3, [r7, #8]
   return(result);
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f043 0320 	orr.w	r3, r3, #32
 8008374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6979      	ldr	r1, [r7, #20]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	613b      	str	r3, [r7, #16]
   return(result);
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e4      	bne.n	8008360 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008396:	e007      	b.n	80083a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699a      	ldr	r2, [r3, #24]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0208 	orr.w	r2, r2, #8
 80083a6:	619a      	str	r2, [r3, #24]
}
 80083a8:	bf00      	nop
 80083aa:	37b0      	adds	r7, #176	; 0xb0
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	effffffe 	.word	0xeffffffe
 80083b4:	58000c00 	.word	0x58000c00
 80083b8:	08007ced 	.word	0x08007ced

080083bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b0ae      	sub	sp, #184	; 0xb8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f2:	2b22      	cmp	r3, #34	; 0x22
 80083f4:	f040 8184 	bne.w	8008700 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008402:	e127      	b.n	8008654 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008416:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800841a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800841e:	4013      	ands	r3, r2
 8008420:	b29a      	uxth	r2, r3
 8008422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008426:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842c:	1c9a      	adds	r2, r3, #2
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008438:	b29b      	uxth	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800844e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	2b00      	cmp	r3, #0
 8008458:	d053      	beq.n	8008502 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800845a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d011      	beq.n	800848a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800846a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00b      	beq.n	800848a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2201      	movs	r2, #1
 8008478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008480:	f043 0201 	orr.w	r2, r3, #1
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800848a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d011      	beq.n	80084ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00b      	beq.n	80084ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2202      	movs	r2, #2
 80084a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b0:	f043 0204 	orr.w	r2, r3, #4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084be:	f003 0304 	and.w	r3, r3, #4
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d011      	beq.n	80084ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80084c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2204      	movs	r2, #4
 80084d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e0:	f043 0202 	orr.w	r2, r3, #2
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d006      	beq.n	8008502 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7fe f9f3 	bl	80068e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008508:	b29b      	uxth	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	f040 80a2 	bne.w	8008654 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800851e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	461a      	mov	r2, r3
 800852e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008536:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008538:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800853a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e2      	bne.n	8008510 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3308      	adds	r3, #8
 8008550:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800855a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800855c:	4b6e      	ldr	r3, [pc, #440]	; (8008718 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800855e:	4013      	ands	r3, r2
 8008560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3308      	adds	r3, #8
 800856a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800856e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008570:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800857c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e3      	bne.n	800854a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2220      	movs	r2, #32
 8008586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a60      	ldr	r2, [pc, #384]	; (800871c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d021      	beq.n	80085e4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d01a      	beq.n	80085e4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80085d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e4      	bne.n	80085ae <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d130      	bne.n	800864e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fa:	e853 3f00 	ldrex	r3, [r3]
 80085fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008602:	f023 0310 	bic.w	r3, r3, #16
 8008606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008614:	647b      	str	r3, [r7, #68]	; 0x44
 8008616:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800861a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e4      	bne.n	80085f2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	f003 0310 	and.w	r3, r3, #16
 8008632:	2b10      	cmp	r3, #16
 8008634:	d103      	bne.n	800863e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2210      	movs	r2, #16
 800863c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fe f954 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
 800864c:	e002      	b.n	8008654 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7fe f93c 	bl	80068cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008654:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008658:	2b00      	cmp	r3, #0
 800865a:	d006      	beq.n	800866a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800865c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b00      	cmp	r3, #0
 8008666:	f47f aecd 	bne.w	8008404 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008670:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008674:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008678:	2b00      	cmp	r3, #0
 800867a:	d049      	beq.n	8008710 <UART_RxISR_16BIT_FIFOEN+0x354>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008682:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008686:	429a      	cmp	r2, r3
 8008688:	d242      	bcs.n	8008710 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	623b      	str	r3, [r7, #32]
   return(result);
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3308      	adds	r3, #8
 80086aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80086ae:	633a      	str	r2, [r7, #48]	; 0x30
 80086b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e3      	bne.n	800868a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a16      	ldr	r2, [pc, #88]	; (8008720 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80086c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f043 0320 	orr.w	r3, r3, #32
 80086dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086ea:	61fb      	str	r3, [r7, #28]
 80086ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	69b9      	ldr	r1, [r7, #24]
 80086f0:	69fa      	ldr	r2, [r7, #28]
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	617b      	str	r3, [r7, #20]
   return(result);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e4      	bne.n	80086c8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086fe:	e007      	b.n	8008710 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699a      	ldr	r2, [r3, #24]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0208 	orr.w	r2, r2, #8
 800870e:	619a      	str	r2, [r3, #24]
}
 8008710:	bf00      	nop
 8008712:	37b8      	adds	r7, #184	; 0xb8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	effffffe 	.word	0xeffffffe
 800871c:	58000c00 	.word	0x58000c00
 8008720:	08007ea5 	.word	0x08007ea5

08008724 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_UARTEx_DisableFifoMode+0x16>
 8008772:	2302      	movs	r3, #2
 8008774:	e027      	b.n	80087c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2224      	movs	r2, #36	; 0x24
 8008782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0201 	bic.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d101      	bne.n	80087ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087e6:	2302      	movs	r3, #2
 80087e8:	e02d      	b.n	8008846 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2224      	movs	r2, #36	; 0x24
 80087f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f850 	bl	80088cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2220      	movs	r2, #32
 8008838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800885e:	2b01      	cmp	r3, #1
 8008860:	d101      	bne.n	8008866 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008862:	2302      	movs	r3, #2
 8008864:	e02d      	b.n	80088c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2224      	movs	r2, #36	; 0x24
 8008872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0201 	bic.w	r2, r2, #1
 800888c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f812 	bl	80088cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
	...

080088cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d108      	bne.n	80088ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088ec:	e031      	b.n	8008952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088ee:	2310      	movs	r3, #16
 80088f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088f2:	2310      	movs	r3, #16
 80088f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	0e5b      	lsrs	r3, r3, #25
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	f003 0307 	and.w	r3, r3, #7
 8008904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	0f5b      	lsrs	r3, r3, #29
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	7b3a      	ldrb	r2, [r7, #12]
 800891a:	4911      	ldr	r1, [pc, #68]	; (8008960 <UARTEx_SetNbDataToProcess+0x94>)
 800891c:	5c8a      	ldrb	r2, [r1, r2]
 800891e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008922:	7b3a      	ldrb	r2, [r7, #12]
 8008924:	490f      	ldr	r1, [pc, #60]	; (8008964 <UARTEx_SetNbDataToProcess+0x98>)
 8008926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008928:	fb93 f3f2 	sdiv	r3, r3, r2
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	7b7a      	ldrb	r2, [r7, #13]
 8008938:	4909      	ldr	r1, [pc, #36]	; (8008960 <UARTEx_SetNbDataToProcess+0x94>)
 800893a:	5c8a      	ldrb	r2, [r1, r2]
 800893c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008940:	7b7a      	ldrb	r2, [r7, #13]
 8008942:	4908      	ldr	r1, [pc, #32]	; (8008964 <UARTEx_SetNbDataToProcess+0x98>)
 8008944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008946:	fb93 f3f2 	sdiv	r3, r3, r2
 800894a:	b29a      	uxth	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008952:	bf00      	nop
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	08008b54 	.word	0x08008b54
 8008964:	08008b5c 	.word	0x08008b5c

08008968 <atoi>:
 8008968:	220a      	movs	r2, #10
 800896a:	2100      	movs	r1, #0
 800896c:	f000 b882 	b.w	8008a74 <strtol>

08008970 <_strtol_l.constprop.0>:
 8008970:	2b01      	cmp	r3, #1
 8008972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008976:	d001      	beq.n	800897c <_strtol_l.constprop.0+0xc>
 8008978:	2b24      	cmp	r3, #36	; 0x24
 800897a:	d906      	bls.n	800898a <_strtol_l.constprop.0+0x1a>
 800897c:	f000 f8a0 	bl	8008ac0 <__errno>
 8008980:	2316      	movs	r3, #22
 8008982:	6003      	str	r3, [r0, #0]
 8008984:	2000      	movs	r0, #0
 8008986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008a70 <_strtol_l.constprop.0+0x100>
 800898e:	460d      	mov	r5, r1
 8008990:	462e      	mov	r6, r5
 8008992:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008996:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800899a:	f017 0708 	ands.w	r7, r7, #8
 800899e:	d1f7      	bne.n	8008990 <_strtol_l.constprop.0+0x20>
 80089a0:	2c2d      	cmp	r4, #45	; 0x2d
 80089a2:	d132      	bne.n	8008a0a <_strtol_l.constprop.0+0x9a>
 80089a4:	782c      	ldrb	r4, [r5, #0]
 80089a6:	2701      	movs	r7, #1
 80089a8:	1cb5      	adds	r5, r6, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d05b      	beq.n	8008a66 <_strtol_l.constprop.0+0xf6>
 80089ae:	2b10      	cmp	r3, #16
 80089b0:	d109      	bne.n	80089c6 <_strtol_l.constprop.0+0x56>
 80089b2:	2c30      	cmp	r4, #48	; 0x30
 80089b4:	d107      	bne.n	80089c6 <_strtol_l.constprop.0+0x56>
 80089b6:	782c      	ldrb	r4, [r5, #0]
 80089b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80089bc:	2c58      	cmp	r4, #88	; 0x58
 80089be:	d14d      	bne.n	8008a5c <_strtol_l.constprop.0+0xec>
 80089c0:	786c      	ldrb	r4, [r5, #1]
 80089c2:	2310      	movs	r3, #16
 80089c4:	3502      	adds	r5, #2
 80089c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80089ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80089ce:	f04f 0e00 	mov.w	lr, #0
 80089d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80089d6:	4676      	mov	r6, lr
 80089d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80089dc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80089e0:	f1bc 0f09 	cmp.w	ip, #9
 80089e4:	d816      	bhi.n	8008a14 <_strtol_l.constprop.0+0xa4>
 80089e6:	4664      	mov	r4, ip
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	dd24      	ble.n	8008a36 <_strtol_l.constprop.0+0xc6>
 80089ec:	f1be 3fff 	cmp.w	lr, #4294967295
 80089f0:	d008      	beq.n	8008a04 <_strtol_l.constprop.0+0x94>
 80089f2:	45b1      	cmp	r9, r6
 80089f4:	d31c      	bcc.n	8008a30 <_strtol_l.constprop.0+0xc0>
 80089f6:	d101      	bne.n	80089fc <_strtol_l.constprop.0+0x8c>
 80089f8:	45a2      	cmp	sl, r4
 80089fa:	db19      	blt.n	8008a30 <_strtol_l.constprop.0+0xc0>
 80089fc:	fb06 4603 	mla	r6, r6, r3, r4
 8008a00:	f04f 0e01 	mov.w	lr, #1
 8008a04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a08:	e7e8      	b.n	80089dc <_strtol_l.constprop.0+0x6c>
 8008a0a:	2c2b      	cmp	r4, #43	; 0x2b
 8008a0c:	bf04      	itt	eq
 8008a0e:	782c      	ldrbeq	r4, [r5, #0]
 8008a10:	1cb5      	addeq	r5, r6, #2
 8008a12:	e7ca      	b.n	80089aa <_strtol_l.constprop.0+0x3a>
 8008a14:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008a18:	f1bc 0f19 	cmp.w	ip, #25
 8008a1c:	d801      	bhi.n	8008a22 <_strtol_l.constprop.0+0xb2>
 8008a1e:	3c37      	subs	r4, #55	; 0x37
 8008a20:	e7e2      	b.n	80089e8 <_strtol_l.constprop.0+0x78>
 8008a22:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008a26:	f1bc 0f19 	cmp.w	ip, #25
 8008a2a:	d804      	bhi.n	8008a36 <_strtol_l.constprop.0+0xc6>
 8008a2c:	3c57      	subs	r4, #87	; 0x57
 8008a2e:	e7db      	b.n	80089e8 <_strtol_l.constprop.0+0x78>
 8008a30:	f04f 3eff 	mov.w	lr, #4294967295
 8008a34:	e7e6      	b.n	8008a04 <_strtol_l.constprop.0+0x94>
 8008a36:	f1be 3fff 	cmp.w	lr, #4294967295
 8008a3a:	d105      	bne.n	8008a48 <_strtol_l.constprop.0+0xd8>
 8008a3c:	2322      	movs	r3, #34	; 0x22
 8008a3e:	6003      	str	r3, [r0, #0]
 8008a40:	4646      	mov	r6, r8
 8008a42:	b942      	cbnz	r2, 8008a56 <_strtol_l.constprop.0+0xe6>
 8008a44:	4630      	mov	r0, r6
 8008a46:	e79e      	b.n	8008986 <_strtol_l.constprop.0+0x16>
 8008a48:	b107      	cbz	r7, 8008a4c <_strtol_l.constprop.0+0xdc>
 8008a4a:	4276      	negs	r6, r6
 8008a4c:	2a00      	cmp	r2, #0
 8008a4e:	d0f9      	beq.n	8008a44 <_strtol_l.constprop.0+0xd4>
 8008a50:	f1be 0f00 	cmp.w	lr, #0
 8008a54:	d000      	beq.n	8008a58 <_strtol_l.constprop.0+0xe8>
 8008a56:	1e69      	subs	r1, r5, #1
 8008a58:	6011      	str	r1, [r2, #0]
 8008a5a:	e7f3      	b.n	8008a44 <_strtol_l.constprop.0+0xd4>
 8008a5c:	2430      	movs	r4, #48	; 0x30
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1b1      	bne.n	80089c6 <_strtol_l.constprop.0+0x56>
 8008a62:	2308      	movs	r3, #8
 8008a64:	e7af      	b.n	80089c6 <_strtol_l.constprop.0+0x56>
 8008a66:	2c30      	cmp	r4, #48	; 0x30
 8008a68:	d0a5      	beq.n	80089b6 <_strtol_l.constprop.0+0x46>
 8008a6a:	230a      	movs	r3, #10
 8008a6c:	e7ab      	b.n	80089c6 <_strtol_l.constprop.0+0x56>
 8008a6e:	bf00      	nop
 8008a70:	08008b65 	.word	0x08008b65

08008a74 <strtol>:
 8008a74:	4613      	mov	r3, r2
 8008a76:	460a      	mov	r2, r1
 8008a78:	4601      	mov	r1, r0
 8008a7a:	4802      	ldr	r0, [pc, #8]	; (8008a84 <strtol+0x10>)
 8008a7c:	6800      	ldr	r0, [r0, #0]
 8008a7e:	f7ff bf77 	b.w	8008970 <_strtol_l.constprop.0>
 8008a82:	bf00      	nop
 8008a84:	2400005c 	.word	0x2400005c

08008a88 <memset>:
 8008a88:	4402      	add	r2, r0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d100      	bne.n	8008a92 <memset+0xa>
 8008a90:	4770      	bx	lr
 8008a92:	f803 1b01 	strb.w	r1, [r3], #1
 8008a96:	e7f9      	b.n	8008a8c <memset+0x4>

08008a98 <strncpy>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	3901      	subs	r1, #1
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	b132      	cbz	r2, 8008aae <strncpy+0x16>
 8008aa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008aa4:	f803 4b01 	strb.w	r4, [r3], #1
 8008aa8:	3a01      	subs	r2, #1
 8008aaa:	2c00      	cmp	r4, #0
 8008aac:	d1f7      	bne.n	8008a9e <strncpy+0x6>
 8008aae:	441a      	add	r2, r3
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d100      	bne.n	8008ab8 <strncpy+0x20>
 8008ab6:	bd10      	pop	{r4, pc}
 8008ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8008abc:	e7f9      	b.n	8008ab2 <strncpy+0x1a>
	...

08008ac0 <__errno>:
 8008ac0:	4b01      	ldr	r3, [pc, #4]	; (8008ac8 <__errno+0x8>)
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	2400005c 	.word	0x2400005c

08008acc <__libc_init_array>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	4d0d      	ldr	r5, [pc, #52]	; (8008b04 <__libc_init_array+0x38>)
 8008ad0:	4c0d      	ldr	r4, [pc, #52]	; (8008b08 <__libc_init_array+0x3c>)
 8008ad2:	1b64      	subs	r4, r4, r5
 8008ad4:	10a4      	asrs	r4, r4, #2
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	42a6      	cmp	r6, r4
 8008ada:	d109      	bne.n	8008af0 <__libc_init_array+0x24>
 8008adc:	4d0b      	ldr	r5, [pc, #44]	; (8008b0c <__libc_init_array+0x40>)
 8008ade:	4c0c      	ldr	r4, [pc, #48]	; (8008b10 <__libc_init_array+0x44>)
 8008ae0:	f000 f818 	bl	8008b14 <_init>
 8008ae4:	1b64      	subs	r4, r4, r5
 8008ae6:	10a4      	asrs	r4, r4, #2
 8008ae8:	2600      	movs	r6, #0
 8008aea:	42a6      	cmp	r6, r4
 8008aec:	d105      	bne.n	8008afa <__libc_init_array+0x2e>
 8008aee:	bd70      	pop	{r4, r5, r6, pc}
 8008af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af4:	4798      	blx	r3
 8008af6:	3601      	adds	r6, #1
 8008af8:	e7ee      	b.n	8008ad8 <__libc_init_array+0xc>
 8008afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008afe:	4798      	blx	r3
 8008b00:	3601      	adds	r6, #1
 8008b02:	e7f2      	b.n	8008aea <__libc_init_array+0x1e>
 8008b04:	08008c70 	.word	0x08008c70
 8008b08:	08008c70 	.word	0x08008c70
 8008b0c:	08008c70 	.word	0x08008c70
 8008b10:	08008c74 	.word	0x08008c74

08008b14 <_init>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	bf00      	nop
 8008b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1a:	bc08      	pop	{r3}
 8008b1c:	469e      	mov	lr, r3
 8008b1e:	4770      	bx	lr

08008b20 <_fini>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	bf00      	nop
 8008b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b26:	bc08      	pop	{r3}
 8008b28:	469e      	mov	lr, r3
 8008b2a:	4770      	bx	lr
